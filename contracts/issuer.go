// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package issuer

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IssuerCertificationRequest is an auto generated low-level Go binding around an user-defined struct.
type IssuerCertificationRequest struct {
	Owner    common.Address
	Data     []byte
	Approved bool
	Revoked  bool
	Sender   common.Address
}

// IssuerABI is the input ABI used to generate the binding from.
const IssuerABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"}],\"name\":\"CertificateRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_volume\",\"type\":\"uint256\"}],\"name\":\"CertificateVolumeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"}],\"name\":\"CertificationRequestApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_certificateIds\",\"type\":\"uint256[]\"}],\"name\":\"CertificationRequestBatchApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"CertificationRequestRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"CertificationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_id\",\"type\":\"uint256[]\"}],\"name\":\"CertificationRequestedBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"certificateTopic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contractRegistryExtended\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateTopic\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_privateIssuer\",\"type\":\"address\"}],\"name\":\"setPrivateIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getCertificationRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"internalType\":\"structIssuer.CertificationRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"requestCertificationFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"},{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"}],\"name\":\"requestCertificationForBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"requestCertification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"revokeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"}],\"name\":\"revokeCertificate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveCertificationRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_requestIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"approveCertificationRequestBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_data\",\"type\":\"bytes[]\"}],\"name\":\"issueBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_volume\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"isRequestValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrivateIssuerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// IssuerBin is the compiled bytecode used for deploying new contracts.
var IssuerBin = "0x60a06040526c01000000000000000000000000300260805234801561002357600080fd5b506080516c0100000000000000000000000090046133016100646000396000818161087a015281816108bd01528181610b7e0152610bc101526133016000f3fe608060405260043610610183576000357c0100000000000000000000000000000000000000000000000000000000900480637b103999116100ee578063e3e47cb6116100a7578063f0b5b68d11610081578063f0b5b68d1461048f578063f21de1e8146104a5578063f2fde38b146104c3578063f689e18a146104e357600080fd5b8063e3e47cb61461042f578063e7d915cf1461044f578063ee7afd821461046f57600080fd5b80637b103999146103645780638da5cb5b146103845780639b709b7a146103a2578063bb3acde9146103c2578063d2174b18146103e2578063da35a26f1461040f57600080fd5b80633e42e9fa116101405780633e42e9fa146102825780634f1ef286146102a257806354fd4d50146102b55780636512f111146103015780636e5f20bd14610331578063715018a61461034f57600080fd5b806306f5497e14610188578063156e29f6146101aa57806320f2637d146101ca5780632b1f4388146101fd5780633659cfe6146102355780633db5717014610255575b600080fd5b34801561019457600080fd5b506101a86101a3366004612c28565b610503565b005b3480156101b657600080fd5b506101a86101c5366004612985565b6105de565b3480156101d657600080fd5b506101ea6101e5366004612bdc565b6106ce565b6040519081526020015b60405180910390f35b34801561020957600080fd5b5060cb5461021d90600160a060020a031681565b604051600160a060020a0390911681526020016101f4565b34801561024157600080fd5b506101a86102503660046128ca565b61086f565b34801561026157600080fd5b50610275610270366004612c28565b61093e565b6040516101f49190613104565b34801561028e57600080fd5b506101a861029d3660046128ca565b610a62565b6101a86102b03660046128e4565b610b73565b3480156102c157600080fd5b50604080518082018252600481527f76302e3100000000000000000000000000000000000000000000000000000000602082015290516101f49190612f6e565b34801561030d57600080fd5b5061032161031c366004612c28565b610c33565b60405190151581526020016101f4565b34801561033d57600080fd5b5060cb54600160a060020a031661021d565b34801561035b57600080fd5b506101a8610dd4565b34801561037057600080fd5b5060ca5461021d90600160a060020a031681565b34801561039057600080fd5b50603354600160a060020a031661021d565b3480156103ae57600080fd5b506101ea6103bd366004612b6f565b610e0d565b3480156103ce57600080fd5b506101ea6103dd366004612930565b610e59565b3480156103ee57600080fd5b506104026103fd366004612b18565b610eaa565b6040516101f49190612f5b565b34801561041b57600080fd5b506101a861042a366004612c58565b611579565b34801561043b57600080fd5b506101ea61044a366004612c7a565b611680565b34801561045b57600080fd5b506101a861046a366004612c28565b6118f6565b34801561047b57600080fd5b5061040261048a3660046129b7565b611a7f565b34801561049b57600080fd5b506101ea60c95481565b3480156104b157600080fd5b5060ca54600160a060020a031661021d565b3480156104cf57600080fd5b506101a86104de3660046128ca565b611b0f565b3480156104ef57600080fd5b506104026104fe366004612a31565b611bc4565b603354600160a060020a031633146105395760405160e560020a62461bcd02815260040161053090613098565b60405180910390fd5b600081815260cf602052604090205460ff161561059b5760405160e560020a62461bcd02815260206004820152600f60248201527f416c7265616479207265766f6b656400000000000000000000000000000000006044820152606401610530565b600081815260cf6020526040808220805460ff191660011790555182917fefa6c5f47ac2523bb4db18032377bf7fdce0fa9d86eddcae1ca9bba38be615d791a250565b603354600160a060020a0316331461060b5760405160e560020a62461bcd02815260040161053090613098565b60ca546040517f836a104000000000000000000000000000000000000000000000000000000000815260048101849052600160a060020a038581166024830152604482018490529091169063836a104090606401600060405180830381600087803b15801561067957600080fd5b505af115801561068d573d6000803e3d6000fd5b50505050808284600160a060020a03167f41c2dee25673dbafd1129227b55cc9d9ba5887f7e753c351ce274f4641daf7e260405160405180910390a4505050565b6000600160a060020a0382166107295760405160e560020a62461bcd02815260206004820152601360248201527f4f776e65722063616e6e6f7420626520307830000000000000000000000000006044820152606401610530565b600060ce6000815461073a90613257565b91905081905590506040518060a0016040528084600160a060020a0316815260200185815260200160001515815260200160001515815260200161077b3390565b600160a060020a03908116909152600083815260cc602090815260409091208351815473ffffffffffffffffffffffffffffffffffffffff191693169290921782558281015180516107d39260018501920190612660565b506040828101516002929092018054606085015160809095015161ffff1990911693151561ff00191693909317610100941515949094029390931775ffffffffffffffffffffffffffffffffffffffff0000191662010000600160a060020a039384160217909255905182918516907ffda3ec1cbd67cbf30346ae8c497a82d68bbfa00bd5d43b96761c03858a08367b90600090a39392505050565b30600160a060020a037f00000000000000000000000000000000000000000000000000000000000000001614156108bb5760405160e560020a62461bcd02815260040161053090612f81565b7f0000000000000000000000000000000000000000000000000000000000000000600160a060020a03166108ed611f14565b600160a060020a0316146109165760405160e560020a62461bcd02815260040161053090612fde565b61091f81611f42565b6040805160008082526020820190925261093b91839190611f6f565b50565b6040805160a08101825260008082526060602083018190529282018190529181018290526080810191909152600082815260cc6020908152604091829020825160a081019093528054600160a060020a0316835260018101805491928401916109a690613219565b80601f01602080910402602001604051908101604052809291908181526020018280546109d290613219565b8015610a1f5780601f106109f457610100808354040283529160200191610a1f565b820191906000526020600020905b815481529060010190602001808311610a0257829003601f168201915b50505091835250506002919091015460ff8082161515602084015261010082041615156040830152620100009004600160a060020a031660609091015292915050565b603354600160a060020a03163314610a8f5760405160e560020a62461bcd02815260040161053090613098565b600160a060020a038116610ae85760405160e560020a62461bcd02815260206004820152601660248201527f43616e6e6f7420757365206164647265737320307830000000000000000000006044820152606401610530565b60cb54600160a060020a031615610b445760405160e560020a62461bcd02815260206004820152601a60248201527f507269766174652069737375657220616c7265616479207365740000000000006044820152606401610530565b60cb805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b30600160a060020a037f0000000000000000000000000000000000000000000000000000000000000000161415610bbf5760405160e560020a62461bcd02815260040161053090612f81565b7f0000000000000000000000000000000000000000000000000000000000000000600160a060020a0316610bf1611f14565b600160a060020a031614610c1a5760405160e560020a62461bcd02815260040161053090612fde565b610c2382611f42565b610c2f82826001611f6f565b5050565b600060ce54821115610c8a5760405160e560020a62461bcd02815260206004820152601d60248201527f636572742072657175657374204944206f7574206f6620626f756e64730000006044820152606401610530565b600082815260cc60209081526040808320815160a081019092528054600160a060020a031682526001810180549293919291840191610cc890613219565b80601f0160208091040260200160405190810160405280929190818152602001828054610cf490613219565b8015610d415780601f10610d1657610100808354040283529160200191610d41565b820191906000526020600020905b815481529060010190602001808311610d2457829003601f168201915b50505091835250506002919091015460ff80821615156020808501919091526101008304909116151560408085019190915262010000909204600160a060020a0316606090930192909252600086815260cd909252908190205490820151919250908015610db157508160600151155b8015610dcc5750600081815260cf602052604090205460ff16155b949350505050565b603354600160a060020a03163314610e015760405160e560020a62461bcd02815260040161053090613098565b610e0b60006120f9565b565b6000610e5283838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506101e59250611f10915050565b9392505050565b603354600090600160a060020a03163314610e895760405160e560020a62461bcd02815260040161053090613098565b6000610e9583866106ce565b9050610ea18185611680565b95945050505050565b6060610ebe603354600160a060020a031690565b600160a060020a031633600160a060020a03161480610ef0575060cb54600160a060020a031633600160a060020a0316145b610f3f5760405160e560020a62461bcd02815260206004820152601a60248201527f63616c6c6572206e6f74206f776e6572206f72206973737565720000000000006044820152606401610530565b8151835114610f635760405160e560020a62461bcd028152600401610530906130cd565b60005b835181101561100357610fa2848281518110610f955760e060020a634e487b7102600052603260045260246000fd5b6020026020010151612158565b610ff15760405160e560020a62461bcd02815260206004820152601b60248201527f616c726561647920617070726f766564206f72207265766f6b656400000000006044820152606401610530565b80610ffb81613257565b915050610f66565b506000835167ffffffffffffffff8111156110315760e060020a634e487b7102600052604160045260246000fd5b60405190808252806020026020018201604052801561105a578160200160208202803683370190505b5090506000845167ffffffffffffffff81111561108a5760e060020a634e487b7102600052604160045260246000fd5b6040519080825280602002602001820160405280156110bd57816020015b60608152602001906001900390816110a85790505b5090506000855167ffffffffffffffff8111156110ed5760e060020a634e487b7102600052604160045260246000fd5b60405190808252806020026020018201604052801561112057816020015b606081526020019060019003908161110b5790505b5090506000865167ffffffffffffffff8111156111505760e060020a634e487b7102600052604160045260246000fd5b604051908082528060200260200182016040528015611179578160200160208202803683370190505b50905060005b87518110156113f257600060cc60008a84815181106111b15760e060020a634e487b7102600052603260045260246000fd5b602090810291909101810151825281019190915260400160002060028101805460ff1916600117905580548751919250600160a060020a03169087908490811061120e5760e060020a634e487b7102600052603260045260246000fd5b6020026020010190600160a060020a03169081600160a060020a03168152505080600101805461123d90613219565b80601f016020809104026020016040519081016040528092919081815260200182805461126990613219565b80156112b65780601f1061128b576101008083540402835291602001916112b6565b820191906000526020600020905b81548152906001019060200180831161129957829003601f168201915b50505050508583815181106112de5760e060020a634e487b7102600052603260045260246000fd5b602002602001018190525088828151811061130c5760e060020a634e487b7102600052603260045260246000fd5b602002602001015160405160240161132691815260200190565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6512f1110000000000000000000000000000000000000000000000000000000017905284518590849081106113a35760e060020a634e487b7102600052603260045260246000fd5b602002602001018190525060c9548383815181106113d45760e060020a634e487b7102600052603260045260246000fd5b602090810291909101015250806113ea81613257565b91505061117f565b5060ca546040517f8838a9d7000000000000000000000000000000000000000000000000000000008152600091600160a060020a031690638838a9d790611445908890879087908d908b90600401612e86565b600060405180830381600087803b15801561145f57600080fd5b505af1158015611473573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261149b9190810190612a88565b905060005b8851811015611528578181815181106114cc5760e060020a634e487b7102600052603260045260246000fd5b602002602001015160cd60008b84815181106114fb5760e060020a634e487b7102600052603260045260246000fd5b6020026020010151815260200190815260200160002081905550808061152090613257565b9150506114a0565b5033600160a060020a03167f01a6c640febca8004b4947f6a67609b27f450062162ced1b4f08edbdf5a67421868a8460405161156693929190612f18565b60405180910390a2979650505050505050565b600054610100900460ff1680611592575060005460ff16155b6115b15760405160e560020a62461bcd0281526004016105309061303b565b600054610100900460ff161580156115d3576000805461ffff19166101011790555b600160a060020a03821661162c5760405160e560020a62461bcd02815260206004820152601660248201527f43616e6e6f7420757365206164647265737320307830000000000000000000006044820152606401610530565b60c983905560ca805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03841617905561166161226b565b6116696122e9565b801561167b576000805461ff00191690555b505050565b6000611694603354600160a060020a031690565b600160a060020a031633600160a060020a031614806116c6575060cb54600160a060020a031633600160a060020a0316145b6117155760405160e560020a62461bcd02815260206004820152601a60248201527f63616c6c6572206e6f74206f776e6572206f72206973737565720000000000006044820152606401610530565b61171e83612158565b61176d5760405160e560020a62461bcd02815260206004820152601b60248201527f616c726561647920617070726f766564206f72207265766f6b656400000000006044820152606401610530565b600083815260cc602052604080822060028101805460ff1916600117905560ca548154925160248101889052919392600160a060020a039182169263543d526d929091169060440160408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6512f1110000000000000000000000000000000000000000000000000000000017905260c95490517c010000000000000000000000000000000000000000000000000000000063ffffffff8616028152611850939291908a9060018a0190600401612da8565b602060405180830381600087803b15801561186a57600080fd5b505af115801561187e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a29190612c40565b600086815260cd60205260408082208390558454905192935083928892600160a060020a03909216917f3e5ec6d038fea8aae03ddd86c2882c546a05ea282e753cf085c8213a61a7913091a4949350505050565b600081815260cc602052604090208054600160a060020a031633600160a060020a0316148061192f5750603354600160a060020a031633145b61197e5760405160e560020a62461bcd02815260206004820152601b60248201527f556e617574686f72697a6564207265766f6b65207265717565737400000000006044820152606401610530565b6002810154610100900460ff16156119db5760405160e560020a62461bcd02815260206004820152600f60248201527f416c7265616479207265766f6b656400000000000000000000000000000000006044820152606401610530565b600281015460ff1615611a335760405160e560020a62461bcd02815260206004820152601e60248201527f43616e2774207265766f6b6520617070726f76656420726571756573747300006044820152606401610530565b60028101805461ff00191661010017905580546040518391600160a060020a0316907f2b117599f21d800ddd10552521c610b44ab51d64ac07ae5cb3ee28bbb19946e590600090a35050565b603354606090600160a060020a03163314611aaf5760405160e560020a62461bcd02815260040161053090613098565b8251845114611ad35760405160e560020a62461bcd028152600401610530906130cd565b8151835114611af75760405160e560020a62461bcd028152600401610530906130cd565b6000611b038386611bc4565b9050610ea18185610eaa565b603354600160a060020a03163314611b3c5760405160e560020a62461bcd02815260040161053090613098565b600160a060020a038116611bbb5760405160e560020a62461bcd02815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610530565b61093b816120f9565b60606000835167ffffffffffffffff811115611bf35760e060020a634e487b7102600052604160045260246000fd5b604051908082528060200260200182016040528015611c1c578160200160208202803683370190505b50905060005b8451811015611ccd576000600160a060020a0316848281518110611c595760e060020a634e487b7102600052603260045260246000fd5b6020026020010151600160a060020a03161415611cbb5760405160e560020a62461bcd02815260206004820152601360248201527f4f776e65722063616e6e6f7420626520307830000000000000000000000000006044820152606401610530565b80611cc581613257565b915050611c22565b5060005b8451811015611e8757600060ce5482611cea91906131ba565b611cf59060016131ba565b90506040518060a00160405280868481518110611d255760e060020a634e487b7102600052603260045260246000fd5b6020026020010151600160a060020a03168152602001878481518110611d5e5760e060020a634e487b7102600052603260045260246000fd5b60200260200101518152602001600015158152602001600015158152602001611d843390565b600160a060020a03908116909152600083815260cc602090815260409091208351815473ffffffffffffffffffffffffffffffffffffffff19169316929092178255828101518051611ddc9260018501920190612660565b506040820151600290910180546060840151608090940151600160a060020a0316620100000275ffffffffffffffffffffffffffffffffffffffff0000199415156101000261ff00199415159490941661ffff1990921691909117929092179290921617905582518190849084908110611e695760e060020a634e487b7102600052603260045260246000fd5b60209081029190910101525080611e7f81613257565b915050611cd1565b5033600160a060020a03167f73f947da50ce21e8eb0e681f2ac946c39445951ffd5c80588338057ef29bc5be8483604051611ec3929190612ef3565b60405180910390a28060018251611eda91906131d2565b81518110611efb5760e060020a634e487b7102600052603260045260246000fd5b602090810291909101015160ce559392505050565b3390565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc54600160a060020a031690565b603354600160a060020a0316331461093b5760405160e560020a62461bcd02815260040161053090613098565b6000611f79611f14565b9050611f8484612353565b600083511180611f915750815b15611fa257611fa08484612418565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166120f257805460ff19166001178155604051600160a060020a038316602482015261204f90869060440160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f3659cfe600000000000000000000000000000000000000000000000000000000179052612418565b50805460ff19168155612060611f14565b600160a060020a031682600160a060020a0316146120e95760405160e560020a62461bcd02815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201527f75727468657220757067726164657300000000000000000000000000000000006064820152608401610530565b6120f285612514565b5050505050565b60338054600160a060020a0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081815260cc60209081526040808320815160a081019092528054600160a060020a0316825260018101805485948401919061219490613219565b80601f01602080910402602001604051908101604052809291908181526020018280546121c090613219565b801561220d5780601f106121e25761010080835404028352916020019161220d565b820191906000526020600020905b8154815290600101906020018083116121f057829003601f168201915b50505091835250506002919091015460ff80821615156020840152610100820416151560408084019190915262010000909104600160a060020a0316606090920191909152810151909150158015610e525750606001511592915050565b600054610100900460ff1680612284575060005460ff16155b6122a35760405160e560020a62461bcd0281526004016105309061303b565b600054610100900460ff161580156122c5576000805461ffff19166101011790555b6122cd612554565b6122d56125c1565b801561093b576000805461ff001916905550565b600054610100900460ff1680612302575060005460ff16155b6123215760405160e560020a62461bcd0281526004016105309061303b565b600054610100900460ff16158015612343576000805461ffff19166101011790555b61234b612554565b6122d5612554565b803b6123ca5760405160e560020a62461bcd02815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610530565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6060823b6124915760405160e560020a62461bcd02815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610530565b60008084600160a060020a0316846040516124ac9190612d8c565b600060405180830381855af49150503d80600081146124e7576040519150601f19603f3d011682016040523d82523d6000602084013e6124ec565b606091505b5091509150610ea182826040518060600160405280602781526020016132a560279139612624565b61251d81612353565b604051600160a060020a038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b600054610100900460ff168061256d575060005460ff16155b61258c5760405160e560020a62461bcd0281526004016105309061303b565b600054610100900460ff161580156122d5576000805461ffff1916610101179055801561093b576000805461ff001916905550565b600054610100900460ff16806125da575060005460ff16155b6125f95760405160e560020a62461bcd0281526004016105309061303b565b600054610100900460ff1615801561261b576000805461ffff19166101011790555b6122d5336120f9565b60608315612633575081610e52565b8251156126435782518084602001fd5b8160405160e560020a62461bcd0281526004016105309190612f6e565b82805461266c90613219565b90600052602060002090601f01602090048101928261268e57600085556126d4565b82601f106126a757805160ff19168380011785556126d4565b828001600101855582156126d4579182015b828111156126d45782518255916020019190600101906126b9565b506126e09291506126e4565b5090565b5b808211156126e057600081556001016126e5565b8035600160a060020a038116811461271057600080fd5b919050565b600082601f830112612725578081fd5b8135602061273a61273583613196565b613165565b8281528181019085830183850287018401881015612756578586fd5b855b8581101561277b57612769826126f9565b84529284019290840190600101612758565b5090979650505050505050565b600082601f830112612798578081fd5b813560206127a861273583613196565b82815281810190858301838502870184018810156127c4578586fd5b855b8581101561277b57813567ffffffffffffffff8111156127e4578788fd5b6127f28a87838c010161285f565b85525092840192908401906001016127c6565b600082601f830112612815578081fd5b8135602061282561273583613196565b8281528181019085830183850287018401881015612841578586fd5b855b8581101561277b57813584529284019290840190600101612843565b600082601f83011261286f578081fd5b813567ffffffffffffffff8111156128895761288961328b565b61289c601f8201601f1916602001613165565b8181528460208386010111156128b0578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156128db578081fd5b610e52826126f9565b600080604083850312156128f6578081fd5b6128ff836126f9565b9150602083013567ffffffffffffffff81111561291a578182fd5b6129268582860161285f565b9150509250929050565b600080600060608486031215612944578081fd5b61294d846126f9565b925060208401359150604084013567ffffffffffffffff81111561296f578182fd5b61297b8682870161285f565b9150509250925092565b600080600060608486031215612999578283fd5b6129a2846126f9565b95602085013595506040909401359392505050565b6000806000606084860312156129cb578283fd5b833567ffffffffffffffff808211156129e2578485fd5b6129ee87838801612715565b94506020860135915080821115612a03578384fd5b612a0f87838801612805565b93506040860135915080821115612a24578283fd5b5061297b86828701612788565b60008060408385031215612a43578182fd5b823567ffffffffffffffff80821115612a5a578384fd5b612a6686838701612788565b93506020850135915080821115612a7b578283fd5b5061292685828601612715565b60006020808385031215612a9a578182fd5b825167ffffffffffffffff811115612ab0578283fd5b8301601f81018513612ac0578283fd5b8051612ace61273582613196565b8181528381019083850185840285018601891015612aea578687fd5b8694505b83851015612b0c578051835260019490940193918501918501612aee565b50979650505050505050565b60008060408385031215612b2a578182fd5b823567ffffffffffffffff80821115612b41578384fd5b612b4d86838701612805565b93506020850135915080821115612b62578283fd5b5061292685828601612805565b60008060208385031215612b81578182fd5b823567ffffffffffffffff80821115612b98578384fd5b818501915085601f830112612bab578384fd5b813581811115612bb9578485fd5b866020828501011115612bca578485fd5b60209290920196919550909350505050565b60008060408385031215612bee578182fd5b823567ffffffffffffffff811115612c04578283fd5b612c108582860161285f565b925050612c1f602084016126f9565b90509250929050565b600060208284031215612c39578081fd5b5035919050565b600060208284031215612c51578081fd5b5051919050565b60008060408385031215612c6a578182fd5b82359150612c1f602084016126f9565b60008060408385031215612c8c578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015612cd3578151600160a060020a031687529582019590820190600101612cae565b509495945050505050565b6000815180845260208085018081965082840281019150828601855b85811015612d24578284038952612d12848351612d60565b98850198935090840190600101612cfa565b5091979650505050505050565b6000815180845260208085019450808401835b83811015612cd357815187529582019590820190600101612d44565b60008151808452612d788160208601602086016131e9565b601f01601f19169290920160200192915050565b60008251612d9e8184602087016131e9565b9190910192915050565b600160a060020a03861681526000602060a081840152612dcb60a0840188612d60565b866040850152856060850152838103608085015282855484600282049050600180831680612dfa57607f831692505b868310811415612e1b5760e060020a634e487b710288526022600452602488fd5b828652602086019550808015612e385760018114612e4957612e73565b60ff19851687528787019550612e73565b60008b815260209020895b85811015612e6d57815489820152908401908901612e54565b88019650505b50939d9c50505050505050505050505050565b60a081526000612e9960a0830188612c9b565b8281036020840152612eab8188612cde565b90508281036040840152612ebf8187612d31565b90508281036060840152612ed38186612d31565b90508281036080840152612ee78185612cde565b98975050505050505050565b604081526000612f066040830185612c9b565b8281036020840152610ea18185612d31565b606081526000612f2b6060830186612c9b565b8281036020840152612f3d8186612d31565b90508281036040840152612f518185612d31565b9695505050505050565b602081526000610e526020830184612d31565b602081526000610e526020830184612d60565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201527f64656c656761746563616c6c0000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201527f6163746976652070726f78790000000000000000000000000000000000000000606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526016908201527f417272617973206e6f742073616d65206c656e67746800000000000000000000604082015260600190565b602081526000600160a060020a03808451166020840152602084015160a0604085015261313460c0850182612d60565b90506040850151151560608501526060850151151560808501528160808601511660a0850152809250505092915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561318e5761318e61328b565b604052919050565b600067ffffffffffffffff8211156131b0576131b061328b565b5060209081020190565b600082198211156131cd576131cd613272565b500190565b6000828210156131e4576131e4613272565b500390565b60005b838110156132045781810151838201526020016131ec565b83811115613213576000848401525b50505050565b60028104600182168061322d57607f821691505b602082108114156132515760e060020a634e487b7102600052602260045260246000fd5b50919050565b600060001982141561326b5761326b613272565b5060010190565b60e060020a634e487b7102600052601160045260246000fd5b60e060020a634e487b7102600052604160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ac871ca8fd6e3a284698c3566f61a0645d9f4e4ab6b0271b0a2fd4424833085164736f6c63430008040033"

// DeployIssuer deploys a new Ethereum contract, binding an instance of Issuer to it.
func DeployIssuer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Issuer, error) {
	parsed, err := abi.JSON(strings.NewReader(IssuerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IssuerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Issuer{IssuerCaller: IssuerCaller{contract: contract}, IssuerTransactor: IssuerTransactor{contract: contract}, IssuerFilterer: IssuerFilterer{contract: contract}}, nil
}

// Issuer is an auto generated Go binding around an Ethereum contract.
type Issuer struct {
	IssuerCaller     // Read-only binding to the contract
	IssuerTransactor // Write-only binding to the contract
	IssuerFilterer   // Log filterer for contract events
}

// IssuerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IssuerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IssuerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IssuerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IssuerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IssuerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IssuerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IssuerSession struct {
	Contract     *Issuer           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IssuerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IssuerCallerSession struct {
	Contract *IssuerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IssuerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IssuerTransactorSession struct {
	Contract     *IssuerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IssuerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IssuerRaw struct {
	Contract *Issuer // Generic contract binding to access the raw methods on
}

// IssuerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IssuerCallerRaw struct {
	Contract *IssuerCaller // Generic read-only contract binding to access the raw methods on
}

// IssuerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IssuerTransactorRaw struct {
	Contract *IssuerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIssuer creates a new instance of Issuer, bound to a specific deployed contract.
func NewIssuer(address common.Address, backend bind.ContractBackend) (*Issuer, error) {
	contract, err := bindIssuer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Issuer{IssuerCaller: IssuerCaller{contract: contract}, IssuerTransactor: IssuerTransactor{contract: contract}, IssuerFilterer: IssuerFilterer{contract: contract}}, nil
}

// NewIssuerCaller creates a new read-only instance of Issuer, bound to a specific deployed contract.
func NewIssuerCaller(address common.Address, caller bind.ContractCaller) (*IssuerCaller, error) {
	contract, err := bindIssuer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IssuerCaller{contract: contract}, nil
}

// NewIssuerTransactor creates a new write-only instance of Issuer, bound to a specific deployed contract.
func NewIssuerTransactor(address common.Address, transactor bind.ContractTransactor) (*IssuerTransactor, error) {
	contract, err := bindIssuer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IssuerTransactor{contract: contract}, nil
}

// NewIssuerFilterer creates a new log filterer instance of Issuer, bound to a specific deployed contract.
func NewIssuerFilterer(address common.Address, filterer bind.ContractFilterer) (*IssuerFilterer, error) {
	contract, err := bindIssuer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IssuerFilterer{contract: contract}, nil
}

// bindIssuer binds a generic wrapper to an already deployed contract.
func bindIssuer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IssuerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Issuer *IssuerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Issuer.Contract.IssuerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Issuer *IssuerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Issuer.Contract.IssuerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Issuer *IssuerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Issuer.Contract.IssuerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Issuer *IssuerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Issuer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Issuer *IssuerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Issuer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Issuer *IssuerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Issuer.Contract.contract.Transact(opts, method, params...)
}

// CertificateTopic is a free data retrieval call binding the contract method 0xf0b5b68d.
//
// Solidity: function certificateTopic() view returns(uint256)
func (_Issuer *IssuerCaller) CertificateTopic(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "certificateTopic")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CertificateTopic is a free data retrieval call binding the contract method 0xf0b5b68d.
//
// Solidity: function certificateTopic() view returns(uint256)
func (_Issuer *IssuerSession) CertificateTopic() (*big.Int, error) {
	return _Issuer.Contract.CertificateTopic(&_Issuer.CallOpts)
}

// CertificateTopic is a free data retrieval call binding the contract method 0xf0b5b68d.
//
// Solidity: function certificateTopic() view returns(uint256)
func (_Issuer *IssuerCallerSession) CertificateTopic() (*big.Int, error) {
	return _Issuer.Contract.CertificateTopic(&_Issuer.CallOpts)
}

// GetCertificationRequest is a free data retrieval call binding the contract method 0x3db57170.
//
// Solidity: function getCertificationRequest(uint256 _requestId) view returns((address,bytes,bool,bool,address))
func (_Issuer *IssuerCaller) GetCertificationRequest(opts *bind.CallOpts, _requestId *big.Int) (IssuerCertificationRequest, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "getCertificationRequest", _requestId)

	if err != nil {
		return *new(IssuerCertificationRequest), err
	}

	out0 := *abi.ConvertType(out[0], new(IssuerCertificationRequest)).(*IssuerCertificationRequest)

	return out0, err

}

// GetCertificationRequest is a free data retrieval call binding the contract method 0x3db57170.
//
// Solidity: function getCertificationRequest(uint256 _requestId) view returns((address,bytes,bool,bool,address))
func (_Issuer *IssuerSession) GetCertificationRequest(_requestId *big.Int) (IssuerCertificationRequest, error) {
	return _Issuer.Contract.GetCertificationRequest(&_Issuer.CallOpts, _requestId)
}

// GetCertificationRequest is a free data retrieval call binding the contract method 0x3db57170.
//
// Solidity: function getCertificationRequest(uint256 _requestId) view returns((address,bytes,bool,bool,address))
func (_Issuer *IssuerCallerSession) GetCertificationRequest(_requestId *big.Int) (IssuerCertificationRequest, error) {
	return _Issuer.Contract.GetCertificationRequest(&_Issuer.CallOpts, _requestId)
}

// GetPrivateIssuerAddress is a free data retrieval call binding the contract method 0x6e5f20bd.
//
// Solidity: function getPrivateIssuerAddress() view returns(address)
func (_Issuer *IssuerCaller) GetPrivateIssuerAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "getPrivateIssuerAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetPrivateIssuerAddress is a free data retrieval call binding the contract method 0x6e5f20bd.
//
// Solidity: function getPrivateIssuerAddress() view returns(address)
func (_Issuer *IssuerSession) GetPrivateIssuerAddress() (common.Address, error) {
	return _Issuer.Contract.GetPrivateIssuerAddress(&_Issuer.CallOpts)
}

// GetPrivateIssuerAddress is a free data retrieval call binding the contract method 0x6e5f20bd.
//
// Solidity: function getPrivateIssuerAddress() view returns(address)
func (_Issuer *IssuerCallerSession) GetPrivateIssuerAddress() (common.Address, error) {
	return _Issuer.Contract.GetPrivateIssuerAddress(&_Issuer.CallOpts)
}

// GetRegistryAddress is a free data retrieval call binding the contract method 0xf21de1e8.
//
// Solidity: function getRegistryAddress() view returns(address)
func (_Issuer *IssuerCaller) GetRegistryAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "getRegistryAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRegistryAddress is a free data retrieval call binding the contract method 0xf21de1e8.
//
// Solidity: function getRegistryAddress() view returns(address)
func (_Issuer *IssuerSession) GetRegistryAddress() (common.Address, error) {
	return _Issuer.Contract.GetRegistryAddress(&_Issuer.CallOpts)
}

// GetRegistryAddress is a free data retrieval call binding the contract method 0xf21de1e8.
//
// Solidity: function getRegistryAddress() view returns(address)
func (_Issuer *IssuerCallerSession) GetRegistryAddress() (common.Address, error) {
	return _Issuer.Contract.GetRegistryAddress(&_Issuer.CallOpts)
}

// IsRequestValid is a free data retrieval call binding the contract method 0x6512f111.
//
// Solidity: function isRequestValid(uint256 _requestId) view returns(bool)
func (_Issuer *IssuerCaller) IsRequestValid(opts *bind.CallOpts, _requestId *big.Int) (bool, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "isRequestValid", _requestId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRequestValid is a free data retrieval call binding the contract method 0x6512f111.
//
// Solidity: function isRequestValid(uint256 _requestId) view returns(bool)
func (_Issuer *IssuerSession) IsRequestValid(_requestId *big.Int) (bool, error) {
	return _Issuer.Contract.IsRequestValid(&_Issuer.CallOpts, _requestId)
}

// IsRequestValid is a free data retrieval call binding the contract method 0x6512f111.
//
// Solidity: function isRequestValid(uint256 _requestId) view returns(bool)
func (_Issuer *IssuerCallerSession) IsRequestValid(_requestId *big.Int) (bool, error) {
	return _Issuer.Contract.IsRequestValid(&_Issuer.CallOpts, _requestId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Issuer *IssuerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Issuer *IssuerSession) Owner() (common.Address, error) {
	return _Issuer.Contract.Owner(&_Issuer.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Issuer *IssuerCallerSession) Owner() (common.Address, error) {
	return _Issuer.Contract.Owner(&_Issuer.CallOpts)
}

// PrivateIssuer is a free data retrieval call binding the contract method 0x2b1f4388.
//
// Solidity: function privateIssuer() view returns(address)
func (_Issuer *IssuerCaller) PrivateIssuer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "privateIssuer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PrivateIssuer is a free data retrieval call binding the contract method 0x2b1f4388.
//
// Solidity: function privateIssuer() view returns(address)
func (_Issuer *IssuerSession) PrivateIssuer() (common.Address, error) {
	return _Issuer.Contract.PrivateIssuer(&_Issuer.CallOpts)
}

// PrivateIssuer is a free data retrieval call binding the contract method 0x2b1f4388.
//
// Solidity: function privateIssuer() view returns(address)
func (_Issuer *IssuerCallerSession) PrivateIssuer() (common.Address, error) {
	return _Issuer.Contract.PrivateIssuer(&_Issuer.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Issuer *IssuerCaller) Registry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "registry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Issuer *IssuerSession) Registry() (common.Address, error) {
	return _Issuer.Contract.Registry(&_Issuer.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Issuer *IssuerCallerSession) Registry() (common.Address, error) {
	return _Issuer.Contract.Registry(&_Issuer.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_Issuer *IssuerCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_Issuer *IssuerSession) Version() (string, error) {
	return _Issuer.Contract.Version(&_Issuer.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_Issuer *IssuerCallerSession) Version() (string, error) {
	return _Issuer.Contract.Version(&_Issuer.CallOpts)
}

// ApproveCertificationRequest is a paid mutator transaction binding the contract method 0xe3e47cb6.
//
// Solidity: function approveCertificationRequest(uint256 _requestId, uint256 _value) returns(uint256)
func (_Issuer *IssuerTransactor) ApproveCertificationRequest(opts *bind.TransactOpts, _requestId *big.Int, _value *big.Int) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "approveCertificationRequest", _requestId, _value)
}

// ApproveCertificationRequest is a paid mutator transaction binding the contract method 0xe3e47cb6.
//
// Solidity: function approveCertificationRequest(uint256 _requestId, uint256 _value) returns(uint256)
func (_Issuer *IssuerSession) ApproveCertificationRequest(_requestId *big.Int, _value *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.ApproveCertificationRequest(&_Issuer.TransactOpts, _requestId, _value)
}

// ApproveCertificationRequest is a paid mutator transaction binding the contract method 0xe3e47cb6.
//
// Solidity: function approveCertificationRequest(uint256 _requestId, uint256 _value) returns(uint256)
func (_Issuer *IssuerTransactorSession) ApproveCertificationRequest(_requestId *big.Int, _value *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.ApproveCertificationRequest(&_Issuer.TransactOpts, _requestId, _value)
}

// ApproveCertificationRequestBatch is a paid mutator transaction binding the contract method 0xd2174b18.
//
// Solidity: function approveCertificationRequestBatch(uint256[] _requestIds, uint256[] _values) returns(uint256[])
func (_Issuer *IssuerTransactor) ApproveCertificationRequestBatch(opts *bind.TransactOpts, _requestIds []*big.Int, _values []*big.Int) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "approveCertificationRequestBatch", _requestIds, _values)
}

// ApproveCertificationRequestBatch is a paid mutator transaction binding the contract method 0xd2174b18.
//
// Solidity: function approveCertificationRequestBatch(uint256[] _requestIds, uint256[] _values) returns(uint256[])
func (_Issuer *IssuerSession) ApproveCertificationRequestBatch(_requestIds []*big.Int, _values []*big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.ApproveCertificationRequestBatch(&_Issuer.TransactOpts, _requestIds, _values)
}

// ApproveCertificationRequestBatch is a paid mutator transaction binding the contract method 0xd2174b18.
//
// Solidity: function approveCertificationRequestBatch(uint256[] _requestIds, uint256[] _values) returns(uint256[])
func (_Issuer *IssuerTransactorSession) ApproveCertificationRequestBatch(_requestIds []*big.Int, _values []*big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.ApproveCertificationRequestBatch(&_Issuer.TransactOpts, _requestIds, _values)
}

// Initialize is a paid mutator transaction binding the contract method 0xda35a26f.
//
// Solidity: function initialize(uint256 _certificateTopic, address _registry) returns()
func (_Issuer *IssuerTransactor) Initialize(opts *bind.TransactOpts, _certificateTopic *big.Int, _registry common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "initialize", _certificateTopic, _registry)
}

// Initialize is a paid mutator transaction binding the contract method 0xda35a26f.
//
// Solidity: function initialize(uint256 _certificateTopic, address _registry) returns()
func (_Issuer *IssuerSession) Initialize(_certificateTopic *big.Int, _registry common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.Initialize(&_Issuer.TransactOpts, _certificateTopic, _registry)
}

// Initialize is a paid mutator transaction binding the contract method 0xda35a26f.
//
// Solidity: function initialize(uint256 _certificateTopic, address _registry) returns()
func (_Issuer *IssuerTransactorSession) Initialize(_certificateTopic *big.Int, _registry common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.Initialize(&_Issuer.TransactOpts, _certificateTopic, _registry)
}

// Issue is a paid mutator transaction binding the contract method 0xbb3acde9.
//
// Solidity: function issue(address _to, uint256 _value, bytes _data) returns(uint256)
func (_Issuer *IssuerTransactor) Issue(opts *bind.TransactOpts, _to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "issue", _to, _value, _data)
}

// Issue is a paid mutator transaction binding the contract method 0xbb3acde9.
//
// Solidity: function issue(address _to, uint256 _value, bytes _data) returns(uint256)
func (_Issuer *IssuerSession) Issue(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.Issue(&_Issuer.TransactOpts, _to, _value, _data)
}

// Issue is a paid mutator transaction binding the contract method 0xbb3acde9.
//
// Solidity: function issue(address _to, uint256 _value, bytes _data) returns(uint256)
func (_Issuer *IssuerTransactorSession) Issue(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.Issue(&_Issuer.TransactOpts, _to, _value, _data)
}

// IssueBatch is a paid mutator transaction binding the contract method 0xee7afd82.
//
// Solidity: function issueBatch(address[] _to, uint256[] _values, bytes[] _data) returns(uint256[])
func (_Issuer *IssuerTransactor) IssueBatch(opts *bind.TransactOpts, _to []common.Address, _values []*big.Int, _data [][]byte) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "issueBatch", _to, _values, _data)
}

// IssueBatch is a paid mutator transaction binding the contract method 0xee7afd82.
//
// Solidity: function issueBatch(address[] _to, uint256[] _values, bytes[] _data) returns(uint256[])
func (_Issuer *IssuerSession) IssueBatch(_to []common.Address, _values []*big.Int, _data [][]byte) (*types.Transaction, error) {
	return _Issuer.Contract.IssueBatch(&_Issuer.TransactOpts, _to, _values, _data)
}

// IssueBatch is a paid mutator transaction binding the contract method 0xee7afd82.
//
// Solidity: function issueBatch(address[] _to, uint256[] _values, bytes[] _data) returns(uint256[])
func (_Issuer *IssuerTransactorSession) IssueBatch(_to []common.Address, _values []*big.Int, _data [][]byte) (*types.Transaction, error) {
	return _Issuer.Contract.IssueBatch(&_Issuer.TransactOpts, _to, _values, _data)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address _to, uint256 _certificateId, uint256 _volume) returns()
func (_Issuer *IssuerTransactor) Mint(opts *bind.TransactOpts, _to common.Address, _certificateId *big.Int, _volume *big.Int) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "mint", _to, _certificateId, _volume)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address _to, uint256 _certificateId, uint256 _volume) returns()
func (_Issuer *IssuerSession) Mint(_to common.Address, _certificateId *big.Int, _volume *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.Mint(&_Issuer.TransactOpts, _to, _certificateId, _volume)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address _to, uint256 _certificateId, uint256 _volume) returns()
func (_Issuer *IssuerTransactorSession) Mint(_to common.Address, _certificateId *big.Int, _volume *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.Mint(&_Issuer.TransactOpts, _to, _certificateId, _volume)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Issuer *IssuerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Issuer *IssuerSession) RenounceOwnership() (*types.Transaction, error) {
	return _Issuer.Contract.RenounceOwnership(&_Issuer.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Issuer *IssuerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Issuer.Contract.RenounceOwnership(&_Issuer.TransactOpts)
}

// RequestCertification is a paid mutator transaction binding the contract method 0x9b709b7a.
//
// Solidity: function requestCertification(bytes _data) returns(uint256)
func (_Issuer *IssuerTransactor) RequestCertification(opts *bind.TransactOpts, _data []byte) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "requestCertification", _data)
}

// RequestCertification is a paid mutator transaction binding the contract method 0x9b709b7a.
//
// Solidity: function requestCertification(bytes _data) returns(uint256)
func (_Issuer *IssuerSession) RequestCertification(_data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertification(&_Issuer.TransactOpts, _data)
}

// RequestCertification is a paid mutator transaction binding the contract method 0x9b709b7a.
//
// Solidity: function requestCertification(bytes _data) returns(uint256)
func (_Issuer *IssuerTransactorSession) RequestCertification(_data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertification(&_Issuer.TransactOpts, _data)
}

// RequestCertificationFor is a paid mutator transaction binding the contract method 0x20f2637d.
//
// Solidity: function requestCertificationFor(bytes _data, address _owner) returns(uint256)
func (_Issuer *IssuerTransactor) RequestCertificationFor(opts *bind.TransactOpts, _data []byte, _owner common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "requestCertificationFor", _data, _owner)
}

// RequestCertificationFor is a paid mutator transaction binding the contract method 0x20f2637d.
//
// Solidity: function requestCertificationFor(bytes _data, address _owner) returns(uint256)
func (_Issuer *IssuerSession) RequestCertificationFor(_data []byte, _owner common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertificationFor(&_Issuer.TransactOpts, _data, _owner)
}

// RequestCertificationFor is a paid mutator transaction binding the contract method 0x20f2637d.
//
// Solidity: function requestCertificationFor(bytes _data, address _owner) returns(uint256)
func (_Issuer *IssuerTransactorSession) RequestCertificationFor(_data []byte, _owner common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertificationFor(&_Issuer.TransactOpts, _data, _owner)
}

// RequestCertificationForBatch is a paid mutator transaction binding the contract method 0xf689e18a.
//
// Solidity: function requestCertificationForBatch(bytes[] _data, address[] _owners) returns(uint256[])
func (_Issuer *IssuerTransactor) RequestCertificationForBatch(opts *bind.TransactOpts, _data [][]byte, _owners []common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "requestCertificationForBatch", _data, _owners)
}

// RequestCertificationForBatch is a paid mutator transaction binding the contract method 0xf689e18a.
//
// Solidity: function requestCertificationForBatch(bytes[] _data, address[] _owners) returns(uint256[])
func (_Issuer *IssuerSession) RequestCertificationForBatch(_data [][]byte, _owners []common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertificationForBatch(&_Issuer.TransactOpts, _data, _owners)
}

// RequestCertificationForBatch is a paid mutator transaction binding the contract method 0xf689e18a.
//
// Solidity: function requestCertificationForBatch(bytes[] _data, address[] _owners) returns(uint256[])
func (_Issuer *IssuerTransactorSession) RequestCertificationForBatch(_data [][]byte, _owners []common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertificationForBatch(&_Issuer.TransactOpts, _data, _owners)
}

// RevokeCertificate is a paid mutator transaction binding the contract method 0x06f5497e.
//
// Solidity: function revokeCertificate(uint256 _certificateId) returns()
func (_Issuer *IssuerTransactor) RevokeCertificate(opts *bind.TransactOpts, _certificateId *big.Int) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "revokeCertificate", _certificateId)
}

// RevokeCertificate is a paid mutator transaction binding the contract method 0x06f5497e.
//
// Solidity: function revokeCertificate(uint256 _certificateId) returns()
func (_Issuer *IssuerSession) RevokeCertificate(_certificateId *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.RevokeCertificate(&_Issuer.TransactOpts, _certificateId)
}

// RevokeCertificate is a paid mutator transaction binding the contract method 0x06f5497e.
//
// Solidity: function revokeCertificate(uint256 _certificateId) returns()
func (_Issuer *IssuerTransactorSession) RevokeCertificate(_certificateId *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.RevokeCertificate(&_Issuer.TransactOpts, _certificateId)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0xe7d915cf.
//
// Solidity: function revokeRequest(uint256 _requestId) returns()
func (_Issuer *IssuerTransactor) RevokeRequest(opts *bind.TransactOpts, _requestId *big.Int) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "revokeRequest", _requestId)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0xe7d915cf.
//
// Solidity: function revokeRequest(uint256 _requestId) returns()
func (_Issuer *IssuerSession) RevokeRequest(_requestId *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.RevokeRequest(&_Issuer.TransactOpts, _requestId)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0xe7d915cf.
//
// Solidity: function revokeRequest(uint256 _requestId) returns()
func (_Issuer *IssuerTransactorSession) RevokeRequest(_requestId *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.RevokeRequest(&_Issuer.TransactOpts, _requestId)
}

// SetPrivateIssuer is a paid mutator transaction binding the contract method 0x3e42e9fa.
//
// Solidity: function setPrivateIssuer(address _privateIssuer) returns()
func (_Issuer *IssuerTransactor) SetPrivateIssuer(opts *bind.TransactOpts, _privateIssuer common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "setPrivateIssuer", _privateIssuer)
}

// SetPrivateIssuer is a paid mutator transaction binding the contract method 0x3e42e9fa.
//
// Solidity: function setPrivateIssuer(address _privateIssuer) returns()
func (_Issuer *IssuerSession) SetPrivateIssuer(_privateIssuer common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.SetPrivateIssuer(&_Issuer.TransactOpts, _privateIssuer)
}

// SetPrivateIssuer is a paid mutator transaction binding the contract method 0x3e42e9fa.
//
// Solidity: function setPrivateIssuer(address _privateIssuer) returns()
func (_Issuer *IssuerTransactorSession) SetPrivateIssuer(_privateIssuer common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.SetPrivateIssuer(&_Issuer.TransactOpts, _privateIssuer)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Issuer *IssuerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Issuer *IssuerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.TransferOwnership(&_Issuer.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Issuer *IssuerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.TransferOwnership(&_Issuer.TransactOpts, newOwner)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Issuer *IssuerTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Issuer *IssuerSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.UpgradeTo(&_Issuer.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Issuer *IssuerTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.UpgradeTo(&_Issuer.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Issuer *IssuerTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Issuer *IssuerSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.UpgradeToAndCall(&_Issuer.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Issuer *IssuerTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.UpgradeToAndCall(&_Issuer.TransactOpts, newImplementation, data)
}

// IssuerAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Issuer contract.
type IssuerAdminChangedIterator struct {
	Event *IssuerAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerAdminChanged represents a AdminChanged event raised by the Issuer contract.
type IssuerAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Issuer *IssuerFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*IssuerAdminChangedIterator, error) {

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &IssuerAdminChangedIterator{contract: _Issuer.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Issuer *IssuerFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *IssuerAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerAdminChanged)
				if err := _Issuer.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Issuer *IssuerFilterer) ParseAdminChanged(log types.Log) (*IssuerAdminChanged, error) {
	event := new(IssuerAdminChanged)
	if err := _Issuer.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Issuer contract.
type IssuerBeaconUpgradedIterator struct {
	Event *IssuerBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerBeaconUpgraded represents a BeaconUpgraded event raised by the Issuer contract.
type IssuerBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Issuer *IssuerFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*IssuerBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &IssuerBeaconUpgradedIterator{contract: _Issuer.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Issuer *IssuerFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *IssuerBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerBeaconUpgraded)
				if err := _Issuer.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Issuer *IssuerFilterer) ParseBeaconUpgraded(log types.Log) (*IssuerBeaconUpgraded, error) {
	event := new(IssuerBeaconUpgraded)
	if err := _Issuer.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificateRevokedIterator is returned from FilterCertificateRevoked and is used to iterate over the raw logs and unpacked data for CertificateRevoked events raised by the Issuer contract.
type IssuerCertificateRevokedIterator struct {
	Event *IssuerCertificateRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificateRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificateRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificateRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificateRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificateRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificateRevoked represents a CertificateRevoked event raised by the Issuer contract.
type IssuerCertificateRevoked struct {
	CertificateId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCertificateRevoked is a free log retrieval operation binding the contract event 0xefa6c5f47ac2523bb4db18032377bf7fdce0fa9d86eddcae1ca9bba38be615d7.
//
// Solidity: event CertificateRevoked(uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) FilterCertificateRevoked(opts *bind.FilterOpts, _certificateId []*big.Int) (*IssuerCertificateRevokedIterator, error) {

	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificateRevoked", _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificateRevokedIterator{contract: _Issuer.contract, event: "CertificateRevoked", logs: logs, sub: sub}, nil
}

// WatchCertificateRevoked is a free log subscription operation binding the contract event 0xefa6c5f47ac2523bb4db18032377bf7fdce0fa9d86eddcae1ca9bba38be615d7.
//
// Solidity: event CertificateRevoked(uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) WatchCertificateRevoked(opts *bind.WatchOpts, sink chan<- *IssuerCertificateRevoked, _certificateId []*big.Int) (event.Subscription, error) {

	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificateRevoked", _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificateRevoked)
				if err := _Issuer.contract.UnpackLog(event, "CertificateRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificateRevoked is a log parse operation binding the contract event 0xefa6c5f47ac2523bb4db18032377bf7fdce0fa9d86eddcae1ca9bba38be615d7.
//
// Solidity: event CertificateRevoked(uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) ParseCertificateRevoked(log types.Log) (*IssuerCertificateRevoked, error) {
	event := new(IssuerCertificateRevoked)
	if err := _Issuer.contract.UnpackLog(event, "CertificateRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificateVolumeMintedIterator is returned from FilterCertificateVolumeMinted and is used to iterate over the raw logs and unpacked data for CertificateVolumeMinted events raised by the Issuer contract.
type IssuerCertificateVolumeMintedIterator struct {
	Event *IssuerCertificateVolumeMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificateVolumeMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificateVolumeMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificateVolumeMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificateVolumeMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificateVolumeMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificateVolumeMinted represents a CertificateVolumeMinted event raised by the Issuer contract.
type IssuerCertificateVolumeMinted struct {
	Owner         common.Address
	CertificateId *big.Int
	Volume        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCertificateVolumeMinted is a free log retrieval operation binding the contract event 0x41c2dee25673dbafd1129227b55cc9d9ba5887f7e753c351ce274f4641daf7e2.
//
// Solidity: event CertificateVolumeMinted(address indexed _owner, uint256 indexed _certificateId, uint256 indexed _volume)
func (_Issuer *IssuerFilterer) FilterCertificateVolumeMinted(opts *bind.FilterOpts, _owner []common.Address, _certificateId []*big.Int, _volume []*big.Int) (*IssuerCertificateVolumeMintedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}
	var _volumeRule []interface{}
	for _, _volumeItem := range _volume {
		_volumeRule = append(_volumeRule, _volumeItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificateVolumeMinted", _ownerRule, _certificateIdRule, _volumeRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificateVolumeMintedIterator{contract: _Issuer.contract, event: "CertificateVolumeMinted", logs: logs, sub: sub}, nil
}

// WatchCertificateVolumeMinted is a free log subscription operation binding the contract event 0x41c2dee25673dbafd1129227b55cc9d9ba5887f7e753c351ce274f4641daf7e2.
//
// Solidity: event CertificateVolumeMinted(address indexed _owner, uint256 indexed _certificateId, uint256 indexed _volume)
func (_Issuer *IssuerFilterer) WatchCertificateVolumeMinted(opts *bind.WatchOpts, sink chan<- *IssuerCertificateVolumeMinted, _owner []common.Address, _certificateId []*big.Int, _volume []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}
	var _volumeRule []interface{}
	for _, _volumeItem := range _volume {
		_volumeRule = append(_volumeRule, _volumeItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificateVolumeMinted", _ownerRule, _certificateIdRule, _volumeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificateVolumeMinted)
				if err := _Issuer.contract.UnpackLog(event, "CertificateVolumeMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificateVolumeMinted is a log parse operation binding the contract event 0x41c2dee25673dbafd1129227b55cc9d9ba5887f7e753c351ce274f4641daf7e2.
//
// Solidity: event CertificateVolumeMinted(address indexed _owner, uint256 indexed _certificateId, uint256 indexed _volume)
func (_Issuer *IssuerFilterer) ParseCertificateVolumeMinted(log types.Log) (*IssuerCertificateVolumeMinted, error) {
	event := new(IssuerCertificateVolumeMinted)
	if err := _Issuer.contract.UnpackLog(event, "CertificateVolumeMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificationRequestApprovedIterator is returned from FilterCertificationRequestApproved and is used to iterate over the raw logs and unpacked data for CertificationRequestApproved events raised by the Issuer contract.
type IssuerCertificationRequestApprovedIterator struct {
	Event *IssuerCertificationRequestApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificationRequestApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificationRequestApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificationRequestApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificationRequestApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificationRequestApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificationRequestApproved represents a CertificationRequestApproved event raised by the Issuer contract.
type IssuerCertificationRequestApproved struct {
	Owner         common.Address
	Id            *big.Int
	CertificateId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCertificationRequestApproved is a free log retrieval operation binding the contract event 0x3e5ec6d038fea8aae03ddd86c2882c546a05ea282e753cf085c8213a61a79130.
//
// Solidity: event CertificationRequestApproved(address indexed _owner, uint256 indexed _id, uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) FilterCertificationRequestApproved(opts *bind.FilterOpts, _owner []common.Address, _id []*big.Int, _certificateId []*big.Int) (*IssuerCertificationRequestApprovedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificationRequestApproved", _ownerRule, _idRule, _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificationRequestApprovedIterator{contract: _Issuer.contract, event: "CertificationRequestApproved", logs: logs, sub: sub}, nil
}

// WatchCertificationRequestApproved is a free log subscription operation binding the contract event 0x3e5ec6d038fea8aae03ddd86c2882c546a05ea282e753cf085c8213a61a79130.
//
// Solidity: event CertificationRequestApproved(address indexed _owner, uint256 indexed _id, uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) WatchCertificationRequestApproved(opts *bind.WatchOpts, sink chan<- *IssuerCertificationRequestApproved, _owner []common.Address, _id []*big.Int, _certificateId []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificationRequestApproved", _ownerRule, _idRule, _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificationRequestApproved)
				if err := _Issuer.contract.UnpackLog(event, "CertificationRequestApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificationRequestApproved is a log parse operation binding the contract event 0x3e5ec6d038fea8aae03ddd86c2882c546a05ea282e753cf085c8213a61a79130.
//
// Solidity: event CertificationRequestApproved(address indexed _owner, uint256 indexed _id, uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) ParseCertificationRequestApproved(log types.Log) (*IssuerCertificationRequestApproved, error) {
	event := new(IssuerCertificationRequestApproved)
	if err := _Issuer.contract.UnpackLog(event, "CertificationRequestApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificationRequestBatchApprovedIterator is returned from FilterCertificationRequestBatchApproved and is used to iterate over the raw logs and unpacked data for CertificationRequestBatchApproved events raised by the Issuer contract.
type IssuerCertificationRequestBatchApprovedIterator struct {
	Event *IssuerCertificationRequestBatchApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificationRequestBatchApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificationRequestBatchApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificationRequestBatchApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificationRequestBatchApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificationRequestBatchApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificationRequestBatchApproved represents a CertificationRequestBatchApproved event raised by the Issuer contract.
type IssuerCertificationRequestBatchApproved struct {
	Operator       common.Address
	Owners         []common.Address
	Ids            []*big.Int
	CertificateIds []*big.Int
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterCertificationRequestBatchApproved is a free log retrieval operation binding the contract event 0x01a6c640febca8004b4947f6a67609b27f450062162ced1b4f08edbdf5a67421.
//
// Solidity: event CertificationRequestBatchApproved(address indexed operator, address[] _owners, uint256[] _ids, uint256[] _certificateIds)
func (_Issuer *IssuerFilterer) FilterCertificationRequestBatchApproved(opts *bind.FilterOpts, operator []common.Address) (*IssuerCertificationRequestBatchApprovedIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificationRequestBatchApproved", operatorRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificationRequestBatchApprovedIterator{contract: _Issuer.contract, event: "CertificationRequestBatchApproved", logs: logs, sub: sub}, nil
}

// WatchCertificationRequestBatchApproved is a free log subscription operation binding the contract event 0x01a6c640febca8004b4947f6a67609b27f450062162ced1b4f08edbdf5a67421.
//
// Solidity: event CertificationRequestBatchApproved(address indexed operator, address[] _owners, uint256[] _ids, uint256[] _certificateIds)
func (_Issuer *IssuerFilterer) WatchCertificationRequestBatchApproved(opts *bind.WatchOpts, sink chan<- *IssuerCertificationRequestBatchApproved, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificationRequestBatchApproved", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificationRequestBatchApproved)
				if err := _Issuer.contract.UnpackLog(event, "CertificationRequestBatchApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificationRequestBatchApproved is a log parse operation binding the contract event 0x01a6c640febca8004b4947f6a67609b27f450062162ced1b4f08edbdf5a67421.
//
// Solidity: event CertificationRequestBatchApproved(address indexed operator, address[] _owners, uint256[] _ids, uint256[] _certificateIds)
func (_Issuer *IssuerFilterer) ParseCertificationRequestBatchApproved(log types.Log) (*IssuerCertificationRequestBatchApproved, error) {
	event := new(IssuerCertificationRequestBatchApproved)
	if err := _Issuer.contract.UnpackLog(event, "CertificationRequestBatchApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificationRequestRevokedIterator is returned from FilterCertificationRequestRevoked and is used to iterate over the raw logs and unpacked data for CertificationRequestRevoked events raised by the Issuer contract.
type IssuerCertificationRequestRevokedIterator struct {
	Event *IssuerCertificationRequestRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificationRequestRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificationRequestRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificationRequestRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificationRequestRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificationRequestRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificationRequestRevoked represents a CertificationRequestRevoked event raised by the Issuer contract.
type IssuerCertificationRequestRevoked struct {
	Owner common.Address
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCertificationRequestRevoked is a free log retrieval operation binding the contract event 0x2b117599f21d800ddd10552521c610b44ab51d64ac07ae5cb3ee28bbb19946e5.
//
// Solidity: event CertificationRequestRevoked(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) FilterCertificationRequestRevoked(opts *bind.FilterOpts, _owner []common.Address, _id []*big.Int) (*IssuerCertificationRequestRevokedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificationRequestRevoked", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificationRequestRevokedIterator{contract: _Issuer.contract, event: "CertificationRequestRevoked", logs: logs, sub: sub}, nil
}

// WatchCertificationRequestRevoked is a free log subscription operation binding the contract event 0x2b117599f21d800ddd10552521c610b44ab51d64ac07ae5cb3ee28bbb19946e5.
//
// Solidity: event CertificationRequestRevoked(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) WatchCertificationRequestRevoked(opts *bind.WatchOpts, sink chan<- *IssuerCertificationRequestRevoked, _owner []common.Address, _id []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificationRequestRevoked", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificationRequestRevoked)
				if err := _Issuer.contract.UnpackLog(event, "CertificationRequestRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificationRequestRevoked is a log parse operation binding the contract event 0x2b117599f21d800ddd10552521c610b44ab51d64ac07ae5cb3ee28bbb19946e5.
//
// Solidity: event CertificationRequestRevoked(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) ParseCertificationRequestRevoked(log types.Log) (*IssuerCertificationRequestRevoked, error) {
	event := new(IssuerCertificationRequestRevoked)
	if err := _Issuer.contract.UnpackLog(event, "CertificationRequestRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificationRequestedIterator is returned from FilterCertificationRequested and is used to iterate over the raw logs and unpacked data for CertificationRequested events raised by the Issuer contract.
type IssuerCertificationRequestedIterator struct {
	Event *IssuerCertificationRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificationRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificationRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificationRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificationRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificationRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificationRequested represents a CertificationRequested event raised by the Issuer contract.
type IssuerCertificationRequested struct {
	Owner common.Address
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCertificationRequested is a free log retrieval operation binding the contract event 0xfda3ec1cbd67cbf30346ae8c497a82d68bbfa00bd5d43b96761c03858a08367b.
//
// Solidity: event CertificationRequested(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) FilterCertificationRequested(opts *bind.FilterOpts, _owner []common.Address, _id []*big.Int) (*IssuerCertificationRequestedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificationRequested", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificationRequestedIterator{contract: _Issuer.contract, event: "CertificationRequested", logs: logs, sub: sub}, nil
}

// WatchCertificationRequested is a free log subscription operation binding the contract event 0xfda3ec1cbd67cbf30346ae8c497a82d68bbfa00bd5d43b96761c03858a08367b.
//
// Solidity: event CertificationRequested(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) WatchCertificationRequested(opts *bind.WatchOpts, sink chan<- *IssuerCertificationRequested, _owner []common.Address, _id []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificationRequested", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificationRequested)
				if err := _Issuer.contract.UnpackLog(event, "CertificationRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificationRequested is a log parse operation binding the contract event 0xfda3ec1cbd67cbf30346ae8c497a82d68bbfa00bd5d43b96761c03858a08367b.
//
// Solidity: event CertificationRequested(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) ParseCertificationRequested(log types.Log) (*IssuerCertificationRequested, error) {
	event := new(IssuerCertificationRequested)
	if err := _Issuer.contract.UnpackLog(event, "CertificationRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificationRequestedBatchIterator is returned from FilterCertificationRequestedBatch and is used to iterate over the raw logs and unpacked data for CertificationRequestedBatch events raised by the Issuer contract.
type IssuerCertificationRequestedBatchIterator struct {
	Event *IssuerCertificationRequestedBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificationRequestedBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificationRequestedBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificationRequestedBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificationRequestedBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificationRequestedBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificationRequestedBatch represents a CertificationRequestedBatch event raised by the Issuer contract.
type IssuerCertificationRequestedBatch struct {
	Operator common.Address
	Owners   []common.Address
	Id       []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterCertificationRequestedBatch is a free log retrieval operation binding the contract event 0x73f947da50ce21e8eb0e681f2ac946c39445951ffd5c80588338057ef29bc5be.
//
// Solidity: event CertificationRequestedBatch(address indexed operator, address[] _owners, uint256[] _id)
func (_Issuer *IssuerFilterer) FilterCertificationRequestedBatch(opts *bind.FilterOpts, operator []common.Address) (*IssuerCertificationRequestedBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificationRequestedBatch", operatorRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificationRequestedBatchIterator{contract: _Issuer.contract, event: "CertificationRequestedBatch", logs: logs, sub: sub}, nil
}

// WatchCertificationRequestedBatch is a free log subscription operation binding the contract event 0x73f947da50ce21e8eb0e681f2ac946c39445951ffd5c80588338057ef29bc5be.
//
// Solidity: event CertificationRequestedBatch(address indexed operator, address[] _owners, uint256[] _id)
func (_Issuer *IssuerFilterer) WatchCertificationRequestedBatch(opts *bind.WatchOpts, sink chan<- *IssuerCertificationRequestedBatch, operator []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificationRequestedBatch", operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificationRequestedBatch)
				if err := _Issuer.contract.UnpackLog(event, "CertificationRequestedBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificationRequestedBatch is a log parse operation binding the contract event 0x73f947da50ce21e8eb0e681f2ac946c39445951ffd5c80588338057ef29bc5be.
//
// Solidity: event CertificationRequestedBatch(address indexed operator, address[] _owners, uint256[] _id)
func (_Issuer *IssuerFilterer) ParseCertificationRequestedBatch(log types.Log) (*IssuerCertificationRequestedBatch, error) {
	event := new(IssuerCertificationRequestedBatch)
	if err := _Issuer.contract.UnpackLog(event, "CertificationRequestedBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Issuer contract.
type IssuerOwnershipTransferredIterator struct {
	Event *IssuerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerOwnershipTransferred represents a OwnershipTransferred event raised by the Issuer contract.
type IssuerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Issuer *IssuerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*IssuerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &IssuerOwnershipTransferredIterator{contract: _Issuer.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Issuer *IssuerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *IssuerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerOwnershipTransferred)
				if err := _Issuer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Issuer *IssuerFilterer) ParseOwnershipTransferred(log types.Log) (*IssuerOwnershipTransferred, error) {
	event := new(IssuerOwnershipTransferred)
	if err := _Issuer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Issuer contract.
type IssuerUpgradedIterator struct {
	Event *IssuerUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerUpgraded represents a Upgraded event raised by the Issuer contract.
type IssuerUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Issuer *IssuerFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*IssuerUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &IssuerUpgradedIterator{contract: _Issuer.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Issuer *IssuerFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *IssuerUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerUpgraded)
				if err := _Issuer.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Issuer *IssuerFilterer) ParseUpgraded(log types.Log) (*IssuerUpgraded, error) {
	event := new(IssuerUpgraded)
	if err := _Issuer.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
