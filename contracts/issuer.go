// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package issuer

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IssuerCertificationRequest is an auto generated low-level Go binding around an user-defined struct.
type IssuerCertificationRequest struct {
	Owner    common.Address
	Data     []byte
	Approved bool
	Revoked  bool
	Sender   common.Address
}

// IssuerABI is the input ABI used to generate the binding from.
const IssuerABI = "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"}],\"name\":\"CertificateRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_volume\",\"type\":\"uint256\"}],\"name\":\"CertificateVolumeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"}],\"name\":\"CertificationRequestApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"CertificationRequestRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"CertificationRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"certificateTopic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateTopic\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_privateIssuer\",\"type\":\"address\"}],\"name\":\"setPrivateIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getCertificationRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"internalType\":\"structIssuer.CertificationRequest\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"requestCertificationFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"requestCertification\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"tryGetCertId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"revokeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"}],\"name\":\"revokeCertificate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approveCertificationRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"issue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_certificateId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_volume\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"isRequestValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrivateIssuerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]"

// IssuerBin is the compiled bytecode used for deploying new contracts.
var IssuerBin = ""

// DeployIssuer deploys a new Ethereum contract, binding an instance of Issuer to it.
func DeployIssuer(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Issuer, error) {
	parsed, err := abi.JSON(strings.NewReader(IssuerABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(IssuerBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Issuer{IssuerCaller: IssuerCaller{contract: contract}, IssuerTransactor: IssuerTransactor{contract: contract}, IssuerFilterer: IssuerFilterer{contract: contract}}, nil
}

// Issuer is an auto generated Go binding around an Ethereum contract.
type Issuer struct {
	IssuerCaller     // Read-only binding to the contract
	IssuerTransactor // Write-only binding to the contract
	IssuerFilterer   // Log filterer for contract events
}

// IssuerCaller is an auto generated read-only Go binding around an Ethereum contract.
type IssuerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IssuerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IssuerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IssuerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IssuerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IssuerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IssuerSession struct {
	Contract     *Issuer           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IssuerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IssuerCallerSession struct {
	Contract *IssuerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// IssuerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IssuerTransactorSession struct {
	Contract     *IssuerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IssuerRaw is an auto generated low-level Go binding around an Ethereum contract.
type IssuerRaw struct {
	Contract *Issuer // Generic contract binding to access the raw methods on
}

// IssuerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IssuerCallerRaw struct {
	Contract *IssuerCaller // Generic read-only contract binding to access the raw methods on
}

// IssuerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IssuerTransactorRaw struct {
	Contract *IssuerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIssuer creates a new instance of Issuer, bound to a specific deployed contract.
func NewIssuer(address common.Address, backend bind.ContractBackend) (*Issuer, error) {
	contract, err := bindIssuer(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Issuer{IssuerCaller: IssuerCaller{contract: contract}, IssuerTransactor: IssuerTransactor{contract: contract}, IssuerFilterer: IssuerFilterer{contract: contract}}, nil
}

// NewIssuerCaller creates a new read-only instance of Issuer, bound to a specific deployed contract.
func NewIssuerCaller(address common.Address, caller bind.ContractCaller) (*IssuerCaller, error) {
	contract, err := bindIssuer(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IssuerCaller{contract: contract}, nil
}

// NewIssuerTransactor creates a new write-only instance of Issuer, bound to a specific deployed contract.
func NewIssuerTransactor(address common.Address, transactor bind.ContractTransactor) (*IssuerTransactor, error) {
	contract, err := bindIssuer(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IssuerTransactor{contract: contract}, nil
}

// NewIssuerFilterer creates a new log filterer instance of Issuer, bound to a specific deployed contract.
func NewIssuerFilterer(address common.Address, filterer bind.ContractFilterer) (*IssuerFilterer, error) {
	contract, err := bindIssuer(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IssuerFilterer{contract: contract}, nil
}

// bindIssuer binds a generic wrapper to an already deployed contract.
func bindIssuer(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(IssuerABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Issuer *IssuerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Issuer.Contract.IssuerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Issuer *IssuerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Issuer.Contract.IssuerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Issuer *IssuerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Issuer.Contract.IssuerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Issuer *IssuerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Issuer.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Issuer *IssuerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Issuer.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Issuer *IssuerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Issuer.Contract.contract.Transact(opts, method, params...)
}

// CertificateTopic is a free data retrieval call binding the contract method 0xf0b5b68d.
//
// Solidity: function certificateTopic() view returns(uint256)
func (_Issuer *IssuerCaller) CertificateTopic(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "certificateTopic")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CertificateTopic is a free data retrieval call binding the contract method 0xf0b5b68d.
//
// Solidity: function certificateTopic() view returns(uint256)
func (_Issuer *IssuerSession) CertificateTopic() (*big.Int, error) {
	return _Issuer.Contract.CertificateTopic(&_Issuer.CallOpts)
}

// CertificateTopic is a free data retrieval call binding the contract method 0xf0b5b68d.
//
// Solidity: function certificateTopic() view returns(uint256)
func (_Issuer *IssuerCallerSession) CertificateTopic() (*big.Int, error) {
	return _Issuer.Contract.CertificateTopic(&_Issuer.CallOpts)
}

// GetCertificationRequest is a free data retrieval call binding the contract method 0x3db57170.
//
// Solidity: function getCertificationRequest(uint256 _requestId) view returns((address,bytes,bool,bool,address))
func (_Issuer *IssuerCaller) GetCertificationRequest(opts *bind.CallOpts, _requestId *big.Int) (IssuerCertificationRequest, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "getCertificationRequest", _requestId)

	if err != nil {
		return *new(IssuerCertificationRequest), err
	}

	out0 := *abi.ConvertType(out[0], new(IssuerCertificationRequest)).(*IssuerCertificationRequest)

	return out0, err

}

// GetCertificationRequest is a free data retrieval call binding the contract method 0x3db57170.
//
// Solidity: function getCertificationRequest(uint256 _requestId) view returns((address,bytes,bool,bool,address))
func (_Issuer *IssuerSession) GetCertificationRequest(_requestId *big.Int) (IssuerCertificationRequest, error) {
	return _Issuer.Contract.GetCertificationRequest(&_Issuer.CallOpts, _requestId)
}

// GetCertificationRequest is a free data retrieval call binding the contract method 0x3db57170.
//
// Solidity: function getCertificationRequest(uint256 _requestId) view returns((address,bytes,bool,bool,address))
func (_Issuer *IssuerCallerSession) GetCertificationRequest(_requestId *big.Int) (IssuerCertificationRequest, error) {
	return _Issuer.Contract.GetCertificationRequest(&_Issuer.CallOpts, _requestId)
}

// GetPrivateIssuerAddress is a free data retrieval call binding the contract method 0x6e5f20bd.
//
// Solidity: function getPrivateIssuerAddress() view returns(address)
func (_Issuer *IssuerCaller) GetPrivateIssuerAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "getPrivateIssuerAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetPrivateIssuerAddress is a free data retrieval call binding the contract method 0x6e5f20bd.
//
// Solidity: function getPrivateIssuerAddress() view returns(address)
func (_Issuer *IssuerSession) GetPrivateIssuerAddress() (common.Address, error) {
	return _Issuer.Contract.GetPrivateIssuerAddress(&_Issuer.CallOpts)
}

// GetPrivateIssuerAddress is a free data retrieval call binding the contract method 0x6e5f20bd.
//
// Solidity: function getPrivateIssuerAddress() view returns(address)
func (_Issuer *IssuerCallerSession) GetPrivateIssuerAddress() (common.Address, error) {
	return _Issuer.Contract.GetPrivateIssuerAddress(&_Issuer.CallOpts)
}

// GetRegistryAddress is a free data retrieval call binding the contract method 0xf21de1e8.
//
// Solidity: function getRegistryAddress() view returns(address)
func (_Issuer *IssuerCaller) GetRegistryAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "getRegistryAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRegistryAddress is a free data retrieval call binding the contract method 0xf21de1e8.
//
// Solidity: function getRegistryAddress() view returns(address)
func (_Issuer *IssuerSession) GetRegistryAddress() (common.Address, error) {
	return _Issuer.Contract.GetRegistryAddress(&_Issuer.CallOpts)
}

// GetRegistryAddress is a free data retrieval call binding the contract method 0xf21de1e8.
//
// Solidity: function getRegistryAddress() view returns(address)
func (_Issuer *IssuerCallerSession) GetRegistryAddress() (common.Address, error) {
	return _Issuer.Contract.GetRegistryAddress(&_Issuer.CallOpts)
}

// IsRequestValid is a free data retrieval call binding the contract method 0x6512f111.
//
// Solidity: function isRequestValid(uint256 _requestId) view returns(bool)
func (_Issuer *IssuerCaller) IsRequestValid(opts *bind.CallOpts, _requestId *big.Int) (bool, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "isRequestValid", _requestId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsRequestValid is a free data retrieval call binding the contract method 0x6512f111.
//
// Solidity: function isRequestValid(uint256 _requestId) view returns(bool)
func (_Issuer *IssuerSession) IsRequestValid(_requestId *big.Int) (bool, error) {
	return _Issuer.Contract.IsRequestValid(&_Issuer.CallOpts, _requestId)
}

// IsRequestValid is a free data retrieval call binding the contract method 0x6512f111.
//
// Solidity: function isRequestValid(uint256 _requestId) view returns(bool)
func (_Issuer *IssuerCallerSession) IsRequestValid(_requestId *big.Int) (bool, error) {
	return _Issuer.Contract.IsRequestValid(&_Issuer.CallOpts, _requestId)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Issuer *IssuerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Issuer *IssuerSession) Owner() (common.Address, error) {
	return _Issuer.Contract.Owner(&_Issuer.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_Issuer *IssuerCallerSession) Owner() (common.Address, error) {
	return _Issuer.Contract.Owner(&_Issuer.CallOpts)
}

// PrivateIssuer is a free data retrieval call binding the contract method 0x2b1f4388.
//
// Solidity: function privateIssuer() view returns(address)
func (_Issuer *IssuerCaller) PrivateIssuer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "privateIssuer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PrivateIssuer is a free data retrieval call binding the contract method 0x2b1f4388.
//
// Solidity: function privateIssuer() view returns(address)
func (_Issuer *IssuerSession) PrivateIssuer() (common.Address, error) {
	return _Issuer.Contract.PrivateIssuer(&_Issuer.CallOpts)
}

// PrivateIssuer is a free data retrieval call binding the contract method 0x2b1f4388.
//
// Solidity: function privateIssuer() view returns(address)
func (_Issuer *IssuerCallerSession) PrivateIssuer() (common.Address, error) {
	return _Issuer.Contract.PrivateIssuer(&_Issuer.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Issuer *IssuerCaller) Registry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "registry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Issuer *IssuerSession) Registry() (common.Address, error) {
	return _Issuer.Contract.Registry(&_Issuer.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_Issuer *IssuerCallerSession) Registry() (common.Address, error) {
	return _Issuer.Contract.Registry(&_Issuer.CallOpts)
}

// TryGetCertId is a free data retrieval call binding the contract method 0x3e061340.
//
// Solidity: function tryGetCertId(uint256 _requestId) view returns(uint256)
func (_Issuer *IssuerCaller) TryGetCertId(opts *bind.CallOpts, _requestId *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "tryGetCertId", _requestId)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TryGetCertId is a free data retrieval call binding the contract method 0x3e061340.
//
// Solidity: function tryGetCertId(uint256 _requestId) view returns(uint256)
func (_Issuer *IssuerSession) TryGetCertId(_requestId *big.Int) (*big.Int, error) {
	return _Issuer.Contract.TryGetCertId(&_Issuer.CallOpts, _requestId)
}

// TryGetCertId is a free data retrieval call binding the contract method 0x3e061340.
//
// Solidity: function tryGetCertId(uint256 _requestId) view returns(uint256)
func (_Issuer *IssuerCallerSession) TryGetCertId(_requestId *big.Int) (*big.Int, error) {
	return _Issuer.Contract.TryGetCertId(&_Issuer.CallOpts, _requestId)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_Issuer *IssuerCaller) Version(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Issuer.contract.Call(opts, &out, "version")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_Issuer *IssuerSession) Version() (string, error) {
	return _Issuer.Contract.Version(&_Issuer.CallOpts)
}

// Version is a free data retrieval call binding the contract method 0x54fd4d50.
//
// Solidity: function version() pure returns(string)
func (_Issuer *IssuerCallerSession) Version() (string, error) {
	return _Issuer.Contract.Version(&_Issuer.CallOpts)
}

// ApproveCertificationRequest is a paid mutator transaction binding the contract method 0xe3e47cb6.
//
// Solidity: function approveCertificationRequest(uint256 _requestId, uint256 _value) returns(uint256)
func (_Issuer *IssuerTransactor) ApproveCertificationRequest(opts *bind.TransactOpts, _requestId *big.Int, _value *big.Int) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "approveCertificationRequest", _requestId, _value)
}

// ApproveCertificationRequest is a paid mutator transaction binding the contract method 0xe3e47cb6.
//
// Solidity: function approveCertificationRequest(uint256 _requestId, uint256 _value) returns(uint256)
func (_Issuer *IssuerSession) ApproveCertificationRequest(_requestId *big.Int, _value *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.ApproveCertificationRequest(&_Issuer.TransactOpts, _requestId, _value)
}

// ApproveCertificationRequest is a paid mutator transaction binding the contract method 0xe3e47cb6.
//
// Solidity: function approveCertificationRequest(uint256 _requestId, uint256 _value) returns(uint256)
func (_Issuer *IssuerTransactorSession) ApproveCertificationRequest(_requestId *big.Int, _value *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.ApproveCertificationRequest(&_Issuer.TransactOpts, _requestId, _value)
}

// Initialize is a paid mutator transaction binding the contract method 0xda35a26f.
//
// Solidity: function initialize(uint256 _certificateTopic, address _registry) returns()
func (_Issuer *IssuerTransactor) Initialize(opts *bind.TransactOpts, _certificateTopic *big.Int, _registry common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "initialize", _certificateTopic, _registry)
}

// Initialize is a paid mutator transaction binding the contract method 0xda35a26f.
//
// Solidity: function initialize(uint256 _certificateTopic, address _registry) returns()
func (_Issuer *IssuerSession) Initialize(_certificateTopic *big.Int, _registry common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.Initialize(&_Issuer.TransactOpts, _certificateTopic, _registry)
}

// Initialize is a paid mutator transaction binding the contract method 0xda35a26f.
//
// Solidity: function initialize(uint256 _certificateTopic, address _registry) returns()
func (_Issuer *IssuerTransactorSession) Initialize(_certificateTopic *big.Int, _registry common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.Initialize(&_Issuer.TransactOpts, _certificateTopic, _registry)
}

// Issue is a paid mutator transaction binding the contract method 0xbb3acde9.
//
// Solidity: function issue(address _to, uint256 _value, bytes _data) returns(uint256)
func (_Issuer *IssuerTransactor) Issue(opts *bind.TransactOpts, _to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "issue", _to, _value, _data)
}

// Issue is a paid mutator transaction binding the contract method 0xbb3acde9.
//
// Solidity: function issue(address _to, uint256 _value, bytes _data) returns(uint256)
func (_Issuer *IssuerSession) Issue(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.Issue(&_Issuer.TransactOpts, _to, _value, _data)
}

// Issue is a paid mutator transaction binding the contract method 0xbb3acde9.
//
// Solidity: function issue(address _to, uint256 _value, bytes _data) returns(uint256)
func (_Issuer *IssuerTransactorSession) Issue(_to common.Address, _value *big.Int, _data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.Issue(&_Issuer.TransactOpts, _to, _value, _data)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address _to, uint256 _certificateId, uint256 _volume) returns()
func (_Issuer *IssuerTransactor) Mint(opts *bind.TransactOpts, _to common.Address, _certificateId *big.Int, _volume *big.Int) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "mint", _to, _certificateId, _volume)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address _to, uint256 _certificateId, uint256 _volume) returns()
func (_Issuer *IssuerSession) Mint(_to common.Address, _certificateId *big.Int, _volume *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.Mint(&_Issuer.TransactOpts, _to, _certificateId, _volume)
}

// Mint is a paid mutator transaction binding the contract method 0x156e29f6.
//
// Solidity: function mint(address _to, uint256 _certificateId, uint256 _volume) returns()
func (_Issuer *IssuerTransactorSession) Mint(_to common.Address, _certificateId *big.Int, _volume *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.Mint(&_Issuer.TransactOpts, _to, _certificateId, _volume)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Issuer *IssuerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Issuer *IssuerSession) RenounceOwnership() (*types.Transaction, error) {
	return _Issuer.Contract.RenounceOwnership(&_Issuer.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_Issuer *IssuerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _Issuer.Contract.RenounceOwnership(&_Issuer.TransactOpts)
}

// RequestCertification is a paid mutator transaction binding the contract method 0x9b709b7a.
//
// Solidity: function requestCertification(bytes _data) returns(uint256)
func (_Issuer *IssuerTransactor) RequestCertification(opts *bind.TransactOpts, _data []byte) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "requestCertification", _data)
}

// RequestCertification is a paid mutator transaction binding the contract method 0x9b709b7a.
//
// Solidity: function requestCertification(bytes _data) returns(uint256)
func (_Issuer *IssuerSession) RequestCertification(_data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertification(&_Issuer.TransactOpts, _data)
}

// RequestCertification is a paid mutator transaction binding the contract method 0x9b709b7a.
//
// Solidity: function requestCertification(bytes _data) returns(uint256)
func (_Issuer *IssuerTransactorSession) RequestCertification(_data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertification(&_Issuer.TransactOpts, _data)
}

// RequestCertificationFor is a paid mutator transaction binding the contract method 0x20f2637d.
//
// Solidity: function requestCertificationFor(bytes _data, address _owner) returns(uint256)
func (_Issuer *IssuerTransactor) RequestCertificationFor(opts *bind.TransactOpts, _data []byte, _owner common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "requestCertificationFor", _data, _owner)
}

// RequestCertificationFor is a paid mutator transaction binding the contract method 0x20f2637d.
//
// Solidity: function requestCertificationFor(bytes _data, address _owner) returns(uint256)
func (_Issuer *IssuerSession) RequestCertificationFor(_data []byte, _owner common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertificationFor(&_Issuer.TransactOpts, _data, _owner)
}

// RequestCertificationFor is a paid mutator transaction binding the contract method 0x20f2637d.
//
// Solidity: function requestCertificationFor(bytes _data, address _owner) returns(uint256)
func (_Issuer *IssuerTransactorSession) RequestCertificationFor(_data []byte, _owner common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.RequestCertificationFor(&_Issuer.TransactOpts, _data, _owner)
}

// RevokeCertificate is a paid mutator transaction binding the contract method 0x06f5497e.
//
// Solidity: function revokeCertificate(uint256 _certificateId) returns()
func (_Issuer *IssuerTransactor) RevokeCertificate(opts *bind.TransactOpts, _certificateId *big.Int) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "revokeCertificate", _certificateId)
}

// RevokeCertificate is a paid mutator transaction binding the contract method 0x06f5497e.
//
// Solidity: function revokeCertificate(uint256 _certificateId) returns()
func (_Issuer *IssuerSession) RevokeCertificate(_certificateId *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.RevokeCertificate(&_Issuer.TransactOpts, _certificateId)
}

// RevokeCertificate is a paid mutator transaction binding the contract method 0x06f5497e.
//
// Solidity: function revokeCertificate(uint256 _certificateId) returns()
func (_Issuer *IssuerTransactorSession) RevokeCertificate(_certificateId *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.RevokeCertificate(&_Issuer.TransactOpts, _certificateId)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0xe7d915cf.
//
// Solidity: function revokeRequest(uint256 _requestId) returns()
func (_Issuer *IssuerTransactor) RevokeRequest(opts *bind.TransactOpts, _requestId *big.Int) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "revokeRequest", _requestId)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0xe7d915cf.
//
// Solidity: function revokeRequest(uint256 _requestId) returns()
func (_Issuer *IssuerSession) RevokeRequest(_requestId *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.RevokeRequest(&_Issuer.TransactOpts, _requestId)
}

// RevokeRequest is a paid mutator transaction binding the contract method 0xe7d915cf.
//
// Solidity: function revokeRequest(uint256 _requestId) returns()
func (_Issuer *IssuerTransactorSession) RevokeRequest(_requestId *big.Int) (*types.Transaction, error) {
	return _Issuer.Contract.RevokeRequest(&_Issuer.TransactOpts, _requestId)
}

// SetPrivateIssuer is a paid mutator transaction binding the contract method 0x3e42e9fa.
//
// Solidity: function setPrivateIssuer(address _privateIssuer) returns()
func (_Issuer *IssuerTransactor) SetPrivateIssuer(opts *bind.TransactOpts, _privateIssuer common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "setPrivateIssuer", _privateIssuer)
}

// SetPrivateIssuer is a paid mutator transaction binding the contract method 0x3e42e9fa.
//
// Solidity: function setPrivateIssuer(address _privateIssuer) returns()
func (_Issuer *IssuerSession) SetPrivateIssuer(_privateIssuer common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.SetPrivateIssuer(&_Issuer.TransactOpts, _privateIssuer)
}

// SetPrivateIssuer is a paid mutator transaction binding the contract method 0x3e42e9fa.
//
// Solidity: function setPrivateIssuer(address _privateIssuer) returns()
func (_Issuer *IssuerTransactorSession) SetPrivateIssuer(_privateIssuer common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.SetPrivateIssuer(&_Issuer.TransactOpts, _privateIssuer)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Issuer *IssuerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Issuer *IssuerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.TransferOwnership(&_Issuer.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_Issuer *IssuerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.TransferOwnership(&_Issuer.TransactOpts, newOwner)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Issuer *IssuerTransactor) UpgradeTo(opts *bind.TransactOpts, newImplementation common.Address) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "upgradeTo", newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Issuer *IssuerSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.UpgradeTo(&_Issuer.TransactOpts, newImplementation)
}

// UpgradeTo is a paid mutator transaction binding the contract method 0x3659cfe6.
//
// Solidity: function upgradeTo(address newImplementation) returns()
func (_Issuer *IssuerTransactorSession) UpgradeTo(newImplementation common.Address) (*types.Transaction, error) {
	return _Issuer.Contract.UpgradeTo(&_Issuer.TransactOpts, newImplementation)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Issuer *IssuerTransactor) UpgradeToAndCall(opts *bind.TransactOpts, newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Issuer.contract.Transact(opts, "upgradeToAndCall", newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Issuer *IssuerSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.UpgradeToAndCall(&_Issuer.TransactOpts, newImplementation, data)
}

// UpgradeToAndCall is a paid mutator transaction binding the contract method 0x4f1ef286.
//
// Solidity: function upgradeToAndCall(address newImplementation, bytes data) payable returns()
func (_Issuer *IssuerTransactorSession) UpgradeToAndCall(newImplementation common.Address, data []byte) (*types.Transaction, error) {
	return _Issuer.Contract.UpgradeToAndCall(&_Issuer.TransactOpts, newImplementation, data)
}

// IssuerAdminChangedIterator is returned from FilterAdminChanged and is used to iterate over the raw logs and unpacked data for AdminChanged events raised by the Issuer contract.
type IssuerAdminChangedIterator struct {
	Event *IssuerAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerAdminChanged represents a AdminChanged event raised by the Issuer contract.
type IssuerAdminChanged struct {
	PreviousAdmin common.Address
	NewAdmin      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterAdminChanged is a free log retrieval operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Issuer *IssuerFilterer) FilterAdminChanged(opts *bind.FilterOpts) (*IssuerAdminChangedIterator, error) {

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return &IssuerAdminChangedIterator{contract: _Issuer.contract, event: "AdminChanged", logs: logs, sub: sub}, nil
}

// WatchAdminChanged is a free log subscription operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Issuer *IssuerFilterer) WatchAdminChanged(opts *bind.WatchOpts, sink chan<- *IssuerAdminChanged) (event.Subscription, error) {

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "AdminChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerAdminChanged)
				if err := _Issuer.contract.UnpackLog(event, "AdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAdminChanged is a log parse operation binding the contract event 0x7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f.
//
// Solidity: event AdminChanged(address previousAdmin, address newAdmin)
func (_Issuer *IssuerFilterer) ParseAdminChanged(log types.Log) (*IssuerAdminChanged, error) {
	event := new(IssuerAdminChanged)
	if err := _Issuer.contract.UnpackLog(event, "AdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerBeaconUpgradedIterator is returned from FilterBeaconUpgraded and is used to iterate over the raw logs and unpacked data for BeaconUpgraded events raised by the Issuer contract.
type IssuerBeaconUpgradedIterator struct {
	Event *IssuerBeaconUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerBeaconUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerBeaconUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerBeaconUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerBeaconUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerBeaconUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerBeaconUpgraded represents a BeaconUpgraded event raised by the Issuer contract.
type IssuerBeaconUpgraded struct {
	Beacon common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterBeaconUpgraded is a free log retrieval operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Issuer *IssuerFilterer) FilterBeaconUpgraded(opts *bind.FilterOpts, beacon []common.Address) (*IssuerBeaconUpgradedIterator, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return &IssuerBeaconUpgradedIterator{contract: _Issuer.contract, event: "BeaconUpgraded", logs: logs, sub: sub}, nil
}

// WatchBeaconUpgraded is a free log subscription operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Issuer *IssuerFilterer) WatchBeaconUpgraded(opts *bind.WatchOpts, sink chan<- *IssuerBeaconUpgraded, beacon []common.Address) (event.Subscription, error) {

	var beaconRule []interface{}
	for _, beaconItem := range beacon {
		beaconRule = append(beaconRule, beaconItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "BeaconUpgraded", beaconRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerBeaconUpgraded)
				if err := _Issuer.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBeaconUpgraded is a log parse operation binding the contract event 0x1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e.
//
// Solidity: event BeaconUpgraded(address indexed beacon)
func (_Issuer *IssuerFilterer) ParseBeaconUpgraded(log types.Log) (*IssuerBeaconUpgraded, error) {
	event := new(IssuerBeaconUpgraded)
	if err := _Issuer.contract.UnpackLog(event, "BeaconUpgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificateRevokedIterator is returned from FilterCertificateRevoked and is used to iterate over the raw logs and unpacked data for CertificateRevoked events raised by the Issuer contract.
type IssuerCertificateRevokedIterator struct {
	Event *IssuerCertificateRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificateRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificateRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificateRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificateRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificateRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificateRevoked represents a CertificateRevoked event raised by the Issuer contract.
type IssuerCertificateRevoked struct {
	CertificateId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCertificateRevoked is a free log retrieval operation binding the contract event 0xefa6c5f47ac2523bb4db18032377bf7fdce0fa9d86eddcae1ca9bba38be615d7.
//
// Solidity: event CertificateRevoked(uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) FilterCertificateRevoked(opts *bind.FilterOpts, _certificateId []*big.Int) (*IssuerCertificateRevokedIterator, error) {

	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificateRevoked", _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificateRevokedIterator{contract: _Issuer.contract, event: "CertificateRevoked", logs: logs, sub: sub}, nil
}

// WatchCertificateRevoked is a free log subscription operation binding the contract event 0xefa6c5f47ac2523bb4db18032377bf7fdce0fa9d86eddcae1ca9bba38be615d7.
//
// Solidity: event CertificateRevoked(uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) WatchCertificateRevoked(opts *bind.WatchOpts, sink chan<- *IssuerCertificateRevoked, _certificateId []*big.Int) (event.Subscription, error) {

	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificateRevoked", _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificateRevoked)
				if err := _Issuer.contract.UnpackLog(event, "CertificateRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificateRevoked is a log parse operation binding the contract event 0xefa6c5f47ac2523bb4db18032377bf7fdce0fa9d86eddcae1ca9bba38be615d7.
//
// Solidity: event CertificateRevoked(uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) ParseCertificateRevoked(log types.Log) (*IssuerCertificateRevoked, error) {
	event := new(IssuerCertificateRevoked)
	if err := _Issuer.contract.UnpackLog(event, "CertificateRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificateVolumeMintedIterator is returned from FilterCertificateVolumeMinted and is used to iterate over the raw logs and unpacked data for CertificateVolumeMinted events raised by the Issuer contract.
type IssuerCertificateVolumeMintedIterator struct {
	Event *IssuerCertificateVolumeMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificateVolumeMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificateVolumeMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificateVolumeMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificateVolumeMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificateVolumeMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificateVolumeMinted represents a CertificateVolumeMinted event raised by the Issuer contract.
type IssuerCertificateVolumeMinted struct {
	Owner         common.Address
	CertificateId *big.Int
	Volume        *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCertificateVolumeMinted is a free log retrieval operation binding the contract event 0x41c2dee25673dbafd1129227b55cc9d9ba5887f7e753c351ce274f4641daf7e2.
//
// Solidity: event CertificateVolumeMinted(address indexed _owner, uint256 indexed _certificateId, uint256 indexed _volume)
func (_Issuer *IssuerFilterer) FilterCertificateVolumeMinted(opts *bind.FilterOpts, _owner []common.Address, _certificateId []*big.Int, _volume []*big.Int) (*IssuerCertificateVolumeMintedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}
	var _volumeRule []interface{}
	for _, _volumeItem := range _volume {
		_volumeRule = append(_volumeRule, _volumeItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificateVolumeMinted", _ownerRule, _certificateIdRule, _volumeRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificateVolumeMintedIterator{contract: _Issuer.contract, event: "CertificateVolumeMinted", logs: logs, sub: sub}, nil
}

// WatchCertificateVolumeMinted is a free log subscription operation binding the contract event 0x41c2dee25673dbafd1129227b55cc9d9ba5887f7e753c351ce274f4641daf7e2.
//
// Solidity: event CertificateVolumeMinted(address indexed _owner, uint256 indexed _certificateId, uint256 indexed _volume)
func (_Issuer *IssuerFilterer) WatchCertificateVolumeMinted(opts *bind.WatchOpts, sink chan<- *IssuerCertificateVolumeMinted, _owner []common.Address, _certificateId []*big.Int, _volume []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}
	var _volumeRule []interface{}
	for _, _volumeItem := range _volume {
		_volumeRule = append(_volumeRule, _volumeItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificateVolumeMinted", _ownerRule, _certificateIdRule, _volumeRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificateVolumeMinted)
				if err := _Issuer.contract.UnpackLog(event, "CertificateVolumeMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificateVolumeMinted is a log parse operation binding the contract event 0x41c2dee25673dbafd1129227b55cc9d9ba5887f7e753c351ce274f4641daf7e2.
//
// Solidity: event CertificateVolumeMinted(address indexed _owner, uint256 indexed _certificateId, uint256 indexed _volume)
func (_Issuer *IssuerFilterer) ParseCertificateVolumeMinted(log types.Log) (*IssuerCertificateVolumeMinted, error) {
	event := new(IssuerCertificateVolumeMinted)
	if err := _Issuer.contract.UnpackLog(event, "CertificateVolumeMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificationRequestApprovedIterator is returned from FilterCertificationRequestApproved and is used to iterate over the raw logs and unpacked data for CertificationRequestApproved events raised by the Issuer contract.
type IssuerCertificationRequestApprovedIterator struct {
	Event *IssuerCertificationRequestApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificationRequestApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificationRequestApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificationRequestApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificationRequestApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificationRequestApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificationRequestApproved represents a CertificationRequestApproved event raised by the Issuer contract.
type IssuerCertificationRequestApproved struct {
	Owner         common.Address
	Id            *big.Int
	CertificateId *big.Int
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterCertificationRequestApproved is a free log retrieval operation binding the contract event 0x3e5ec6d038fea8aae03ddd86c2882c546a05ea282e753cf085c8213a61a79130.
//
// Solidity: event CertificationRequestApproved(address indexed _owner, uint256 indexed _id, uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) FilterCertificationRequestApproved(opts *bind.FilterOpts, _owner []common.Address, _id []*big.Int, _certificateId []*big.Int) (*IssuerCertificationRequestApprovedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificationRequestApproved", _ownerRule, _idRule, _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificationRequestApprovedIterator{contract: _Issuer.contract, event: "CertificationRequestApproved", logs: logs, sub: sub}, nil
}

// WatchCertificationRequestApproved is a free log subscription operation binding the contract event 0x3e5ec6d038fea8aae03ddd86c2882c546a05ea282e753cf085c8213a61a79130.
//
// Solidity: event CertificationRequestApproved(address indexed _owner, uint256 indexed _id, uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) WatchCertificationRequestApproved(opts *bind.WatchOpts, sink chan<- *IssuerCertificationRequestApproved, _owner []common.Address, _id []*big.Int, _certificateId []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}
	var _certificateIdRule []interface{}
	for _, _certificateIdItem := range _certificateId {
		_certificateIdRule = append(_certificateIdRule, _certificateIdItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificationRequestApproved", _ownerRule, _idRule, _certificateIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificationRequestApproved)
				if err := _Issuer.contract.UnpackLog(event, "CertificationRequestApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificationRequestApproved is a log parse operation binding the contract event 0x3e5ec6d038fea8aae03ddd86c2882c546a05ea282e753cf085c8213a61a79130.
//
// Solidity: event CertificationRequestApproved(address indexed _owner, uint256 indexed _id, uint256 indexed _certificateId)
func (_Issuer *IssuerFilterer) ParseCertificationRequestApproved(log types.Log) (*IssuerCertificationRequestApproved, error) {
	event := new(IssuerCertificationRequestApproved)
	if err := _Issuer.contract.UnpackLog(event, "CertificationRequestApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificationRequestRevokedIterator is returned from FilterCertificationRequestRevoked and is used to iterate over the raw logs and unpacked data for CertificationRequestRevoked events raised by the Issuer contract.
type IssuerCertificationRequestRevokedIterator struct {
	Event *IssuerCertificationRequestRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificationRequestRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificationRequestRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificationRequestRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificationRequestRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificationRequestRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificationRequestRevoked represents a CertificationRequestRevoked event raised by the Issuer contract.
type IssuerCertificationRequestRevoked struct {
	Owner common.Address
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCertificationRequestRevoked is a free log retrieval operation binding the contract event 0x2b117599f21d800ddd10552521c610b44ab51d64ac07ae5cb3ee28bbb19946e5.
//
// Solidity: event CertificationRequestRevoked(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) FilterCertificationRequestRevoked(opts *bind.FilterOpts, _owner []common.Address, _id []*big.Int) (*IssuerCertificationRequestRevokedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificationRequestRevoked", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificationRequestRevokedIterator{contract: _Issuer.contract, event: "CertificationRequestRevoked", logs: logs, sub: sub}, nil
}

// WatchCertificationRequestRevoked is a free log subscription operation binding the contract event 0x2b117599f21d800ddd10552521c610b44ab51d64ac07ae5cb3ee28bbb19946e5.
//
// Solidity: event CertificationRequestRevoked(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) WatchCertificationRequestRevoked(opts *bind.WatchOpts, sink chan<- *IssuerCertificationRequestRevoked, _owner []common.Address, _id []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificationRequestRevoked", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificationRequestRevoked)
				if err := _Issuer.contract.UnpackLog(event, "CertificationRequestRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificationRequestRevoked is a log parse operation binding the contract event 0x2b117599f21d800ddd10552521c610b44ab51d64ac07ae5cb3ee28bbb19946e5.
//
// Solidity: event CertificationRequestRevoked(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) ParseCertificationRequestRevoked(log types.Log) (*IssuerCertificationRequestRevoked, error) {
	event := new(IssuerCertificationRequestRevoked)
	if err := _Issuer.contract.UnpackLog(event, "CertificationRequestRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerCertificationRequestedIterator is returned from FilterCertificationRequested and is used to iterate over the raw logs and unpacked data for CertificationRequested events raised by the Issuer contract.
type IssuerCertificationRequestedIterator struct {
	Event *IssuerCertificationRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerCertificationRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerCertificationRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerCertificationRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerCertificationRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerCertificationRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerCertificationRequested represents a CertificationRequested event raised by the Issuer contract.
type IssuerCertificationRequested struct {
	Owner common.Address
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterCertificationRequested is a free log retrieval operation binding the contract event 0xfda3ec1cbd67cbf30346ae8c497a82d68bbfa00bd5d43b96761c03858a08367b.
//
// Solidity: event CertificationRequested(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) FilterCertificationRequested(opts *bind.FilterOpts, _owner []common.Address, _id []*big.Int) (*IssuerCertificationRequestedIterator, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "CertificationRequested", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return &IssuerCertificationRequestedIterator{contract: _Issuer.contract, event: "CertificationRequested", logs: logs, sub: sub}, nil
}

// WatchCertificationRequested is a free log subscription operation binding the contract event 0xfda3ec1cbd67cbf30346ae8c497a82d68bbfa00bd5d43b96761c03858a08367b.
//
// Solidity: event CertificationRequested(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) WatchCertificationRequested(opts *bind.WatchOpts, sink chan<- *IssuerCertificationRequested, _owner []common.Address, _id []*big.Int) (event.Subscription, error) {

	var _ownerRule []interface{}
	for _, _ownerItem := range _owner {
		_ownerRule = append(_ownerRule, _ownerItem)
	}
	var _idRule []interface{}
	for _, _idItem := range _id {
		_idRule = append(_idRule, _idItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "CertificationRequested", _ownerRule, _idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerCertificationRequested)
				if err := _Issuer.contract.UnpackLog(event, "CertificationRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCertificationRequested is a log parse operation binding the contract event 0xfda3ec1cbd67cbf30346ae8c497a82d68bbfa00bd5d43b96761c03858a08367b.
//
// Solidity: event CertificationRequested(address indexed _owner, uint256 indexed _id)
func (_Issuer *IssuerFilterer) ParseCertificationRequested(log types.Log) (*IssuerCertificationRequested, error) {
	event := new(IssuerCertificationRequested)
	if err := _Issuer.contract.UnpackLog(event, "CertificationRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the Issuer contract.
type IssuerOwnershipTransferredIterator struct {
	Event *IssuerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerOwnershipTransferred represents a OwnershipTransferred event raised by the Issuer contract.
type IssuerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Issuer *IssuerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*IssuerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &IssuerOwnershipTransferredIterator{contract: _Issuer.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Issuer *IssuerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *IssuerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerOwnershipTransferred)
				if err := _Issuer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_Issuer *IssuerFilterer) ParseOwnershipTransferred(log types.Log) (*IssuerOwnershipTransferred, error) {
	event := new(IssuerOwnershipTransferred)
	if err := _Issuer.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IssuerUpgradedIterator is returned from FilterUpgraded and is used to iterate over the raw logs and unpacked data for Upgraded events raised by the Issuer contract.
type IssuerUpgradedIterator struct {
	Event *IssuerUpgraded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IssuerUpgradedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IssuerUpgraded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IssuerUpgraded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IssuerUpgradedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IssuerUpgradedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IssuerUpgraded represents a Upgraded event raised by the Issuer contract.
type IssuerUpgraded struct {
	Implementation common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterUpgraded is a free log retrieval operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Issuer *IssuerFilterer) FilterUpgraded(opts *bind.FilterOpts, implementation []common.Address) (*IssuerUpgradedIterator, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Issuer.contract.FilterLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return &IssuerUpgradedIterator{contract: _Issuer.contract, event: "Upgraded", logs: logs, sub: sub}, nil
}

// WatchUpgraded is a free log subscription operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Issuer *IssuerFilterer) WatchUpgraded(opts *bind.WatchOpts, sink chan<- *IssuerUpgraded, implementation []common.Address) (event.Subscription, error) {

	var implementationRule []interface{}
	for _, implementationItem := range implementation {
		implementationRule = append(implementationRule, implementationItem)
	}

	logs, sub, err := _Issuer.contract.WatchLogs(opts, "Upgraded", implementationRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IssuerUpgraded)
				if err := _Issuer.contract.UnpackLog(event, "Upgraded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUpgraded is a log parse operation binding the contract event 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b.
//
// Solidity: event Upgraded(address indexed implementation)
func (_Issuer *IssuerFilterer) ParseUpgraded(log types.Log) (*IssuerUpgraded, error) {
	event := new(IssuerUpgraded)
	if err := _Issuer.contract.UnpackLog(event, "Upgraded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
